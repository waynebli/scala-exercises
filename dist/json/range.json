{
  "title": "Range",
  "modules": [
    {
      "preparagraph": "Range are not inclusive at end of range:",
      "code": "val someNumbers = Range(0, 10)\nval second = someNumbers(1)\nval last = someNumbers.last\n\nsomeNumbers.size should be(__)\nsecond should be(__)\nlast should be(__)",
      "solutions": [
        "10",
        "1",
        "9"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Range can specify a step for an increment:",
      "code": "val someNumbers = Range(2, 10, 3)\nval second = someNumbers(1)\nval last = someNumbers.last\n\nsomeNumbers.size should be(__)\nsecond should be(__)\nlast should be(__)",
      "solutions": [
        "3",
        "5",
        "8"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Range does not include the last item, even in a step increment:",
      "code": "val someNumbers = Range(0, 34, 2)\nsomeNumbers.contains(33) should be(__)\nsomeNumbers.contains(32) should be(__)\nsomeNumbers.contains(34) should be(__)",
      "solutions": [
        "false",
        "true",
        "false"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Range can specify to include the last value",
      "code": "val someNumbers = Range(0, 34).inclusive\n\nsomeNumbers.contains(34) should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": "A Range is an ordered sequence of integers that are equally spaced apart. For example, \"1, 2, 3,\" is a range, as is \"5, 8, 11, 14.\" To create a range in Scala, use the predefined methods `to` and `by`. `1 to 3` generates `Range(1, 2, 3)` and `5 to 14 by 3` generates `Range(5, 8, 11, 14)`.\n\nIf you want to create a range that is exclusive of its upper limit, then use the convenience method `until` instead of `to`: `1 until 3` generates `Range(1, 2)`. \n\nRanges are represented in constant space, because they can be defined by just three numbers: their start, their end, and the stepping value. Because of this representation, most operations on ranges are extremely fast.\n"
    }
  ]
}
