{
  "title": "Iterables",
  "modules": [
    {
      "preparagraph": "The next trait from the top in the collections hierarchy is `Iterable`. All methods in this trait are defined in terms of an abstract method, `iterator`, which yields the collection's elements one by one. The `foreach` method from trait `Traversable` is implemented in `Iterable` in terms of `iterator`. Here is the actual implementation:\n\n\n    def foreach[U](f: Elem => U): Unit = {\n      val it = iterator\n      while (it.hasNext) f(it.next())\n    }\n\n\nQuite a few subclasses of `Iterable` override this standard implementation of foreach in `Iterable`, because they can provide a more efficient implementation. Remember that `foreach` is the basis of the implementation of all operations in `Traversable`, so its performance matters.\n\nSome known iterators are *Sets*, *Lists*, *Vectors*, *Stacks*, and *Streams*. Iterator has two important methods:  `hasNext`, which answers whether the iterator has another element available. `next` which will return the next element in the iterator.\n",
      "code": "val list = List(3, 5, 9, 11, 15, 19, 21)\nval it = list.iterator\nif (it.hasNext) {\n  it.next should be(__)\n}",
      "solutions": [
        "3"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`grouped` will return an fixed sized Iterable chucks of an Iterable",
      "code": "val list = List(3, 5, 9, 11, 15, 19, 21, 24, 32)\nval it = list grouped 3\nit.next() should be(List(__, __, __))\nit.next() should be(List(__, __, __))\nit.next() should be(List(__, __, __))",
      "solutions": [
        "3",
        "5",
        "9",
        "11",
        "15",
        "19",
        "21",
        "24",
        "32"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`sliding` will return an Iterable that shows a sliding window of an Iterable.",
      "code": "val list = List(3, 5, 9, 11, 15, 19, 21, 24, 32)\nval it = list sliding 3\nit.next() should be(List(__, __, __))\nit.next() should be(List(__, __, __))\nit.next() should be(List(__, __, __))",
      "solutions": [
        "3",
        "5",
        "9",
        "5",
        "9",
        "11",
        "9",
        "11",
        "15"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`sliding` can take the size of the window as well the size of the step during each iteration",
      "code": "val list = List(3, 5, 9, 11, 15, 19, 21, 24, 32)\nval it = list sliding(3, 3)\nit.next() should be(List(__, __, __))\nit.next() should be(List(__, __, __))\nit.next() should be(List(__, __, __))",
      "solutions": [
        "3",
        "5",
        "9",
        "11",
        "15",
        "19",
        "21",
        "24",
        "32"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`takeRight` is the opposite of 'take' in Traversable.  It retrieves the last elements of an Iterable.",
      "code": "val list = List(3, 5, 9, 11, 15, 19, 21, 24, 32)\n(list takeRight 3) should be(List(__, __, __))",
      "solutions": [
        "21",
        "24",
        "32"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`dropRight` will drop the number of elements from the right.",
      "code": "val list = List(3, 5, 9, 11, 15, 19, 21, 24, 32)\n(list dropRight 3) should be(List(__, __, __, __, __, __))",
      "solutions": [
        "3",
        "5",
        "9",
        "11",
        "15",
        "19"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`zip` will stitch two iterables into an iterable of pairs of corresponding elements from both iterables.\n\nE.g. `Iterable(x1, x2, x3) zip Iterable(y1, y2, y3)` will return `((x1,y1), (x2, y2), (x3, y3))`:",
      "code": "val xs = List(3, 5, 9)\nval ys = List(\"Bob\", \"Ann\", \"Stella\")\n(xs zip ys) should be(List((__, __), (__, __), (__, __)))",
      "solutions": [
        "3",
        "\"Bob\"",
        "5",
        "\"Ann\"",
        "9",
        "\"Stella\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "If two Iterables aren't the same size, then `zip` will only zip what can only be paired.\n  \nE.g. `Iterable(x1, x2, x3) zip Iterable(y1, y2)` will return `((x1,y1), (x2, y2))`\n",
      "code": "val xs = List(3, 5, 9)\nval ys = List(\"Bob\", \"Ann\")\n(xs zip ys) should be(List((__, __), (__, __)))",
      "solutions": [
        "3",
        "\"Bob\"",
        "5",
        "\"Ann\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "If two Iterables aren't the same size, then `zipAll` can provide fillers for what it couldn't find a complement for:\n\nE.g. `Iterable(x1, x2, x3) zipAll (Iterable(y1, y2), x, y)` will return `((x1,y1), (x2, y2), (x3, y)))`",
      "code": "val xs = List(3, 5, 9)\nval ys = List(\"Bob\", \"Ann\")\n(xs zipAll(ys, -1, \"?\")) should be(List((__, __), (__, __), (__, \"?\")))\n\nval xs = List(3, 5)\nval ys = List(\"Bob\", \"Ann\", \"Stella\")\n(xs zipAll(ys, -1, \"?\")) should be(List((__, __), (__, __), (-1, __)))\n\n",
      "solutions": [
        "3",
        "\"Bob\"",
        "5",
        "\"Ann\"",
        "9",
        "3",
        "\"Bob\"",
        "5",
        "\"Ann\"",
        "\"Stella\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`zipWithIndex` will zip an Iterable with it's integer index",
      "code": "val xs = List(\"Manny\", \"Moe\", \"Jack\")\nxs.zipWithIndex should be(List((__, 0), (__, __), (__, 2)))",
      "solutions": [
        "\"Manny\"",
        "\"Moe\"",
        "1",
        "\"Jack\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`sameElements` will return true if the two iterables produce the same elements in the same order:",
      "code": "val xs = List(\"Manny\", \"Moe\", \"Jack\")\nval ys = List(\"Manny\", \"Moe\", \"Jack\")\n(xs sameElements ys) should be(__)\n\nval xs = List(\"Manny\", \"Moe\", \"Jack\")\nval ys = List(\"Manny\", \"Jack\", \"Moe\")\n(xs sameElements ys) should be(__)\n\nval xs1 = Set(3, 2, 1, 4, 5, 6, 7)\nval ys1 = Set(7, 2, 1, 4, 5, 6, 3)\n(xs1 sameElements ys1) should be(__)\n\nval xs1 = Set(1, 2, 3)\nval ys1 = Set(3, 2, 1)\n(xs1 sameElements ys1) should be(__) // Caution - see below!",
      "solutions": [
        "true",
        "false",
        "true",
        "false"
      ],
      "postparagraph": "Note that very small Sets (containing up to 4 elements) are implemented differently to larger Sets; as a result, their iterators produce the elements in the order that they were originally added. This causes the surprising (and arguably incorrect) behaviour in the final example above."
    }
  ]
}
