{
  "title": "Traversables",
  "modules": [
    {
      "preparagraph": "At the top of the collection hierarchy is trait *Traversable*. Its only abstract operation is `foreach`:\n\n```\ndef foreach[U](f: Elem => U) \n```\n\nCollection classes that implement *Traversable* just need to define this method; all other methods can be inherited from *Traversable*.\n\nThe `foreach` method is meant to traverse all elements of the collection, and apply the given operation, `f`, to each element. The type of the operation is `Elem => U`, where `Elem` is the type of the collectionâ€™s elements and `U` is an arbitrary result type. The invocation of `f` is done for its side effect only; in fact any function result of `f` is discarded by `foreach`.\n\nTraversables are the superclass of *Lists*, *Arrays*, *Maps*, *Sets*, *Streams*, and more.  The methods involved can be applied to each other in a different type. `++` appends two Traversables together.",
      "code": "val set = Set(1, 9, 10, 22)\nval list = List(3, 4, 5, 10)\nval result = set ++ list\nresult.size should be(__)\n\nval result2 = list ++ set\nresult2.size should be(__)",
      "solutions": [
        "7",
        "8"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`map` will apply the given function on all elements of a *Traversable* and return a new collection of the result.",
      "code": "val set = Set(1, 3, 4, 6)\nval result = set.map(_ * 4)\nresult.last should be(__)",
      "solutions": [
        "24"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`flatten` will smash all child *Traversables* within a *Traversable*",
      "code": "val list = List(List(1), List(2, 3, 4), List(5, 6, 7), List(8, 9, 10))\nlist.flatten should be(List(__, __, __, __, __, __, __, __, __, __))",
      "solutions": [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`flatMap` will not only apply the given function on all elements of a *Traversable*, but all elements within the elements and `flatten` the results:",
      "code": "val list = List(List(1), List(2, 3, 4), List(5, 6, 7), List(8, 9, 10))\nval result = list.flatMap(_.map(_ * 4))\nresult should be(List(__, __, __, __, __, __, __, __, __, __))",
      "solutions": [
        "4",
        "8",
        "12",
        "16",
        "20",
        "24",
        "28",
        "32",
        "36",
        "40"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`flatMap` of `Options` will filter out all `None`s and Keep the `Some`s",
      "code": "val list = List(1, 2, 3, 4, 5)\nval result = list.flatMap(it => if (it % 2 == 0) Some(it) else None)\nresult should be(List(__, __))",
      "solutions": [
        "2",
        "4"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`collect` will apply a partial function to all elements of a *Traversable* and will return a different collection. In this exercise, a case fragment is a partial function:",
      "code": "val list = List(4, 6, 7, 8, 9, 13, 14)\nval result = list.collect {\n  case x: Int if (x % 2 == 0) => x * 3\n}\nresult should be(List(__, __, __, __))",
      "solutions": [
        "12",
        "18",
        "24",
        "42"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`collect` will apply a partial function to all elements of a *Traversable* and will return a different collection. In this exercise, two case fragments are chained to create a more robust result:",
      "code": "val list = List(4, 6, 7, 8, 9, 13, 14)\nval partialFunction1: PartialFunction[Int, Int] = {\n  case x: Int if x % 2 == 0 => x * 3\n}\nval partialFunction2: PartialFunction[Int, Int] = {\n  case y: Int if y % 2 != 0 => y * 4\n}\nval result = list.collect(partialFunction1 orElse partialFunction2)\nresult should be(List(__, __, __, __, __, __, __))",
      "solutions": [
        "12",
        "18",
        "28",
        "24",
        "36",
        "52",
        "42"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`foreach` will apply a function to all elements of a *Traversable*, but unlike\n the `map` function, it will not return anything since the return type is `Unit`, which is like a `void` return type in *Java*, *C++*",
      "code": "val list = List(4, 6, 7, 8, 9, 13, 14)\nlist.foreach(num => println(num * 4))\nlist should be(List(__, __, __, __, __, __, __))",
      "solutions": [
        "4",
        "6",
        "7",
        "8",
        "9",
        "13",
        "14"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toArray` will convert any *Traversable* to an `Array`, which is a special wrapper around a primitive *Java* array.",
      "code": "val set = Set(4, 6, 7, 8, 9, 13, 14)\nval result = set.toArray\nresult.isInstanceOf[Array[Int]] should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toList` will convert any *Traversable* to a `List`.",
      "code": "val set = Set(4, 6, 7, 8, 9, 13, 14)\nval result = set.toList\n\nresult.isInstanceOf[List[_]] should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toList`, as well as other conversion methods like `toSet`, `toArray`, will not convert if the collection type is the same.",
      "code": "val list = List(5, 6, 7, 8, 9)\nval result = list.toList\nresult eq list should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toIterable` will convert any *Traversable* to an *Iterable*. This is a base *trait* for all Scala collections that define an iterator method to step through one-by-one the collection's elements. ",
      "code": "val set = Set(4, 6, 7, 8, 9, 13, 14)\nval result = set.toIterable\nresult.isInstanceOf[Iterable[_]] should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toSeq` will convert any *Traversable* to a *Seq* which is an ordered `Iterable`   and is the superclass to *List*, *Queues*, and *Vectors*. *Sequences* provide a method apply for indexing. Indices range from 0 up the the length of a sequence.",
      "code": "val set = Set(4, 6, 7, 8, 9, 13, 14)\nval result = set.toSeq\nresult.isInstanceOf[Seq[_]] should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toIndexedSeq` will convert any *Traversable* to an *IndexedSeq* which is an indexed sequence used in *Vectors* and *Strings*",
      "code": "val set = Set(4, 6, 7, 8, 9, 13, 14)\nval result = set.toIndexedSeq\nresult.isInstanceOf[IndexedSeq[_]] should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toStream` will convert any *Traversable* to a `Stream` which is a lazy list where elements are evaluated as they are needed.",
      "code": "val list = List(4, 6, 7, 8, 9, 13, 14)\nval result = list.toStream\nresult.isInstanceOf[Stream[_]] should be(__)\n(result take 3) should be(List(__, __, __))",
      "solutions": [
        "true",
        "4",
        "6",
        "7"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toSet` will convert any *Traversable* to a *Set* which is a collection of unordered, unique values.",
      "code": "val list = List(4, 6, 7, 8, 9, 13, 14)\nval result = list.toSet\nresult.isInstanceOf[Set[_]] should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toMap` will convert any *Traversable* to a *Map*. How it's used depends on the original collection; if it's a *List* or *Seq*, it should be of parameterized type *Tuple2*.",
      "code": "val list = List(\"Phoenix\" -> \"Arizona\", \"Austin\" -> \"Texas\")\nval result = list.toMap\nresult.isInstanceOf[Map[_, _]] should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toMap` will convert a *Set* to a *Map*, it should be of parameterized type *Tuple2*.",
      "code": "val set = Set(\"Phoenix\" -> \"Arizona\", \"Austin\" -> \"Texas\")\nval result = set.toMap\nresult.isInstanceOf[Map[_, _]] should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`isEmpty` is pretty self evident",
      "code": "val map = Map(\"Phoenix\" -> \"Arizona\", \"Austin\" -> \"Texas\")\nmap.isEmpty should be(__)\n\nval set = Set()\nset.isEmpty should be(__)",
      "solutions": [
        "false",
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`nonEmpty` is pretty self evident too",
      "code": "val map = Map(\"Phoenix\" -> \"Arizona\", \"Austin\" -> \"Texas\")\nmap.nonEmpty should be(__)\n\nval set = Set()\nset.nonEmpty should be(__)",
      "solutions": [
        "true",
        "false"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`size` provides the size of the traversable",
      "code": "val map = Map(\"Phoenix\" -> \"Arizona\", \"Austin\" -> \"Texas\")\nmap.size should be(__)",
      "solutions": [
        "2"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`hasDefiniteSize` will return `true` if there is traversable that has a finite end, otherwise `false`.",
      "code": "val map = Map(\"Phoenix\" -> \"Arizona\", \"Austin\" -> \"Texas\")\nmap.hasDefiniteSize should be(__)\n\nimport Stream.cons\nval stream = cons(0, cons(1, Stream.empty))\nstream.hasDefiniteSize should be(__)",
      "solutions": [
        "true",
        "false"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`head` will return the first element of an ordered collection, or some random element if order is not defined like in a *Set* or *Map*",
      "code": "val list = List(10, 19, 45, 1, 22)\nlist.head should be(__)",
      "solutions": [
        "10"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`headOption` will return the first element as an *Option* of an ordered collection, or some random element if order is not defined.  If a first element is not available, then *None* is returned.",
      "code": "val list = List(10, 19, 45, 1, 22)\nlist.headOption should be(Some(__))\n\nval list2 = List()\nlist2.headOption should be(__)",
      "solutions": [
        "10",
        "None"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`last` will return the last element of an ordered collection, or some random element if order is not defined like in a *Set* or *Map*.",
      "code": "val list = List(10, 19, 45, 1, 22)\nlist.last should be(__)",
      "solutions": [
        "22"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`lastOption` will return the first element as an *Option* of an ordered collection, or some random element if order is not defined.  If a first element is not available, then `None` is returned:",
      "code": "val list = List(10, 19, 45, 1, 22)\nlist.lastOption should be(Some(__))\n\nval list2 = List()\nlist2.lastOption should be(__)",
      "solutions": [
        "22",
        "None"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`find` will locate the first item that matches a predicate p as *Some* or *None* if an element is not found:",
      "code": "val list = List(10, 19, 45, 1, 22)\nlist.find(_ % 2 != 0) should be(Some(__))\n\nval list2 = List(4, 8, 16)\nlist2.find(_ % 2 != 0) should be(__)",
      "solutions": [
        "19",
        "None"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`tail` will return the rest of the collection without the head",
      "code": "val list = List(10, 19, 45, 1, 22)\nlist.tail should be(List(__, __, __, __))",
      "solutions": [
        "19",
        "45",
        "1",
        "22"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`init` will return the rest of the collection without the last",
      "code": "val list = List(10, 19, 45, 1, 22)\nlist.init should be(List(__, __, __, __))",
      "solutions": [
        "10",
        "19",
        "45",
        "1"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Given a `from` index, and a `to` index, slice will return the part of the collection including `from`, and excluding `to`:",
      "code": "val list = List(10, 19, 45, 1, 22)\nlist.slice(1, 3) should be(List(__, __))",
      "solutions": [
        "19",
        "45"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`take` will return the the first number of elements given.",
      "code": "val list = List(10, 19, 45, 1, 22)\nlist.take(3) should be(List(__, __, __))",
      "solutions": [
        "10",
        "19",
        "45"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`take` is used often with *Streams*, and *Streams* after all are *Traversable*.",
      "code": "def streamer(v: Int): Stream[Int] = cons(v, streamer(v + 1))\nval a = streamer(2)\n(a take 3 toList) should be(List(__, __, __))",
      "solutions": [
        "2",
        "3",
        "4"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`drop` will take the rest of the *Traversable* except the number of elements given",
      "code": "def streamer(v: Int): Stream[Int] = cons(v, streamer(v + 1))\nval a = streamer(2)\n((a drop 6) take 3).toList should be(List(__, __, __))",
      "solutions": [
        "8",
        "9",
        "10"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`takeWhile` will continually accumulate elements until a predicate is no longer satisfied.",
      "code": "val list = List(87, 44, 5, 4, 200, 10, 39, 100)\nlist.takeWhile(_ < 100) should be(List(__, __, __, __))",
      "solutions": [
        "87",
        "44",
        "5",
        "4"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`dropWhile` will continually drop elements until a predicate is no longer satisfied.",
      "code": "val list = List(87, 44, 5, 4, 200, 10, 39, 100)\nlist.dropWhile(_ < 100) should be(List(__, __, __, __))",
      "solutions": [
        "200",
        "10",
        "39",
        "100"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`filter` will take out all elements that don't satisfy a predicate. An *Array* is also *Traversable*.",
      "code": "val array = Array(87, 44, 5, 4, 200, 10, 39, 100)\narray.filter(_ < 100) should be(Array(__, __, __, __, __, __))",
      "solutions": [
        "87",
        "44",
        "5",
        "4",
        "10",
        "39"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`filterNot` will take out all elements that satisfy a predicate. An *Array* is also *Traversable*.",
      "code": "val array = Array(87, 44, 5, 4, 200, 10, 39, 100)\narray.filterNot(_ < 100) should be(Array(__, __))",
      "solutions": [
        "200",
        "100"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`splitAt` will split a *Traversable* at a position, returning a 2 product   *Tuple*. `splitAt` is also defined as `(xs take n, xs drop n)`",
      "code": "val array = Array(87, 44, 5, 4, 200, 10, 39, 100)\nval result = array splitAt 3\nresult._1 should be(Array(__, __, __))\nresult._2 should be(Array(__, __, __, __, __))",
      "solutions": [
        "87",
        "44",
        "5",
        "4",
        "200",
        "10",
        "39",
        "100"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`span` will split a *Traversable* according to predicate, returning a 2 product *Tuple*.  `span` is also defined as `(xs takeWhile p, xs dropWhile p)`",
      "code": "val array = Array(87, 44, 5, 4, 200, 10, 39, 100)\nval result = array span (_ < 100)\nresult._1 should be(Array(__, __, __, __))\nresult._2 should be(Array(__, __, __, __))",
      "solutions": [
        "87",
        "44",
        "5",
        "4",
        "200",
        "10",
        "39",
        "100"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`partition` will split a *Traversable* according to predicate, returning a 2 product *Tuple*. The left hand side contains the elements satisfied by the predicate whereas the right hand side contains those that `don't`. *Array* is *Traversable*, partition is also defined as `(xs filter p, xs filterNot p)`",
      "code": "val array = Array(87, 44, 5, 4, 200, 10, 39, 100)\nval result = array partition (_ < 100)\nresult._1 should be(Array(__, __, __, __, __, __))\nresult._2 should be(Array(__, __))",
      "solutions": [
        "87",
        "44",
        "5",
        "4",
        "10",
        "39",
        "200",
        "100"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`groupBy` will categorize a *Traversable* according to a given function, and return a map with the results.  This exercise uses *Partial Function* chaining.",
      "code": "val array = Array(87, 44, 5, 4, 200, 10, 39, 100)\n\nval oddAndSmallPartial: PartialFunction[Int, String] = {\n  case x: Int if x % 2 != 0 && x < 100 => \"Odd and less than 100\"\n}\n\nval evenAndSmallPartial: PartialFunction[Int, String] = {\n  case x: Int if x != 0 && x % 2 == 0 && x < 100 => \"Even and less than 100\"\n}\n\nval negativePartial: PartialFunction[Int, String] = {\n  case x: Int if x < 0 => \"Negative Number\"\n}\n\nval largePartial: PartialFunction[Int, String] = {\n  case x: Int if x > 99 => \"Large Number\"\n}\n\nval zeroPartial: PartialFunction[Int, String] = {\n  case x: Int if x == 0 => \"Zero\"\n}\n\nval result = array groupBy {\n    oddAndSmallPartial orElse\n    evenAndSmallPartial orElse\n    negativePartial orElse\n    largePartial orElse\n    zeroPartial\n}\n\n(result(\"Even and less than 100\") size) should be(__)\n(result(\"Large Number\") size) should be(__)",
      "solutions": [
        "3",
        "2"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`forall` will determine if a predicate is valid for all members of a *Traversable*.",
      "code": "val list = List(87, 44, 5, 4, 200, 10, 39, 100)\nval result = list forall (_ < 100)\nresult should be(__)",
      "solutions": [
        "false"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`exists` will determine if a predicate is valid for some members of a *Traversable*.",
      "code": "val list = List(87, 44, 5, 4, 200, 10, 39, 100)\nval result = list exists (_ < 100)\nresult should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`count` will count the number of elements that satisfy a predicate in a *Traversable*.",
      "code": "val list = List(87, 44, 5, 4, 200, 10, 39, 100)\nval result = list count (_ < 100)\nresult should be(__)",
      "solutions": [
        "6"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`/:` or `foldLeft` will combine an operation starting with a seed and combining from the left.  *Fold Left* is defined as (seed /: list), where seed is the initial value.  Once the fold is established, you provide a function that takes two arguments.  The first argument is the running total of the operation, and the second element is the next element of the list.\n\nGiven a `Traversable (x1, x2, x3, x4)`, an initial value of `init`, an operation `op`, `foldLeft` is defined as: `(((init op x1) op x2) op x3) op x4)`",
      "code": "val list = List(5, 4, 3, 2, 1)\nval result = (0 /: list) {\n  (`running total`, `next element`) => `running total` - `next element`\n}\nresult should be(__)\n\nval result2 = list.foldLeft(0) {\n  (`running total`, `next element`) => `running total` - `next element`\n}\nresult2 should be(__)\n\nval result3 = (0 /: list)(_ - _) //Short hand\nresult3 should be(__)\n\nval result4 = list.foldLeft(0)(_ - _)\nresult4 should be(__)\n\n(((((0 - 5) - 4) - 3) - 2) - 1) should be(__)",
      "solutions": [
        "-15",
        "-15",
        "-15",
        "-15",
        "-15"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`:\\` or foldRight` will combine an operation starting with a seed and combining from the right.  Fold right is defined as (list :\\ seed), where seed is the initial value.  Once the fold is established, you  provide a function that takes two elements.  The first is the next element of the list, and the second element is the running total of the operation. \n\nGiven a `Traversable (x1, x2, x3, x4)`, an initial value of `init`, an operation `op`, `foldRight` is defined as: `x1 op (x2 op (x3 op (x4 op init)))`",
      "code": "val list = List(5, 4, 3, 2, 1)\nval result = (list :\\ 0) {\n  (`next element`, `running total`) => `next element` - `running total`\n}\nresult should be(__)\n\nval result2 = (list :\\ 0) {\n  (`next element`, `running total`) => `next element` - `running total`\n}\nresult2 should be(__)\n\nval result3 = (list :\\ 0)(_ - _) //Short hand\nresult3 should be(__)\n\nval result4 = list.foldRight(0)(_ - _)\nresult4 should be(__)\n\n(5 - (4 - (3 - (2 - (1 - 0))))) should be(__)",
      "solutions": [
        "3",
        "3",
        "3",
        "3",
        "3"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`reduceLeft` is the similar to *foldLeft*, except that the seed is the head value",
      "code": "val intList = List(5, 4, 3, 2, 1)\nintList.reduceLeft {\n  _ + _\n} should be(__)\n\nval stringList = List(\"Do\", \"Re\", \"Me\", \"Fa\", \"So\", \"La\", \"Te\", \"Do\")\nstringList.reduceLeft {\n  _ + _\n} should be(__)",
      "solutions": [
        "15",
        "\"DoReMeFaSoLaTeDo\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`reduceRight` is the similar to *foldRight*, except that the seed is the last value",
      "code": "val intList = List(5, 4, 3, 2, 1)\nintList.reduceRight {\n  _ + _\n} should be(__)\n\nval stringList = List(\"Do\", \"Re\", \"Me\", \"Fa\", \"So\", \"La\", \"Te\", \"Do\")\nstringList.reduceRight {\n  _ + _\n} should be(__)",
      "solutions": [
        "15",
        "\"DoReMeFaSoLaTeDo\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "There are some methods that take much of the folding work out by providing basic functionality. `sum` will add all the elements, product will multiply, `min` would determine the smallest element, and `max` the largest.",
      "code": "val intList = List(5, 4, 3, 2, 1)\nintList.sum should be(__)\nintList.product should be(__)\nintList.max should be(__)\nintList.min should be(__)",
      "solutions": [
        "15",
        "120",
        "5",
        "1"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "You would choose *foldLeft/reduceLeft* or *foldRight/reduceRight* based on your mathematical goal. One other reason for deciding is performance.  `foldLeft` is more performant since it uses tail recursion and is optimized. This exercise will either work or you will receive a *StackOverflowError*.",
      "code": "val MAX_SIZE = 1000000\nval reduceLeftStartTime = new java.util.Date\n(1 to MAX_SIZE) reduceLeft (_ + _)\nval reduceLeftEndTime = new java.util.Date\n\n\nval reduceRightStartTime = new java.util.Date\n(1 to MAX_SIZE) reduceRight (_ + _)\nval reduceRightEndTime = new java.util.Date\n\nval totalReduceLeftTime = reduceLeftEndTime.getTime - reduceLeftStartTime.getTime\nval totalReduceRightTime = reduceRightEndTime.getTime - reduceRightStartTime.getTime\n\n//(totalReduceRightTime > totalReduceLeftTime) should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`transpose` will take a traversable of traversables and group them by their position in it's own traversable.  E.g.:\n`((x1, x2),(y1, y2)).transpose = (x1, y1), (x2, y2)` or \n`((x1, x2, x3),(y1, y2, y3),(z1, z2, z3)).transpose = ((x1, y1, z1), (x2, y2, z2), (x3, y3, z3))`",
      "code": "val list = List(List(1, 2, 3), List(4, 5, 6), List(7, 8, 9))\nlist.transpose should be(List(List(__, __, __), List(__, __, __), List(__, __, __)))\n\nval list2 = List(List(1), List(4))\nlist2.transpose should be(List(List(__, __)))",
      "solutions": [
        "1",
        "4",
        "7",
        "2",
        "5",
        "8",
        "3",
        "6",
        "9",
        "1",
        "4"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`mkString` will format a *Traversable* using a given string as the delimiter.",
      "code": "val list = List(1, 2, 3, 4, 5)\nlist.mkString(\",\") should be(__)",
      "solutions": [
        "\"1,2,3,4,5\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`mkString` will also take a beginning and ending string to surround the list.",
      "code": "val list = List(1, 2, 3, 4, 5)\nlist.mkString(\">\", \",\", \"<\") should be(__)",
      "solutions": [
        "\">1,2,3,4,5<\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`addString` will take a StringBuilder to add the contents of list into the builder.",
      "code": "val stringBuilder = new StringBuilder()\nval list = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\nstringBuilder.append(\"I want all numbers 6-12: \")\nlist.filter(it => it > 5 && it < 13).addString(stringBuilder, \",\")\nstringBuilder.mkString should be(__)",
      "solutions": [
        "\"I want all numbers 6-12: 6,7,8,9,10,11,12\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "*Traversables* can have views which allow you to efficiently do compound work.",
      "code": "val lst = List(1, 2, 3)\nvar history = List[String]()\n\ndef addHistory(s: String) {\n  history = history :+ s\n}\n\nval l1 = lst.map {\n    x => addHistory(\"Doubling %s\".format(x))\n    x * 2\n}\n\nval l2 = l1.map { x => addHistory(\"Adding 1 to %s\".format(x)); x + 1}\n\nhistory(0) should be(__)\nhistory(1) should be(__)\nhistory(2) should be(__)\nhistory(3) should be(__)\nhistory(4) should be(__)\nhistory(5) should be(__)\n\nhistory = List[String]()\n\nlst.view.map { x => addHistory(\"Doubling %s\".format(x)); x * 2}.map {\n               x => addHistory(\"Adding 1 to %s\".format(x)); x + 1}.force\n\nhistory(0) should be(__)\nhistory(1) should be(__)\nhistory(2) should be(__)\nhistory(3) should be(__)\nhistory(4) should be(__)\nhistory(5) should be(__)",
      "solutions": [
        "\"Doubling 1\"",
        "\"Doubling 2\"",
        "\"Doubling 3\"",
        "\"Adding 1 to 2\"",
        "\"Adding 1 to 4\"",
        "\"Adding 1 to 6\"",
        "\"Doubling 1\"",
        "\"Adding 1 to 2\"",
        "\"Doubling 2\"",
        "\"Adding 1 to 4\"",
        "\"Doubling 3\"",
        "\"Adding 1 to 6\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`Views` can also accept a `to` and `from` value which takes a subset and performs your view functions on the subset.",
      "code": "val list = List(1, 2, 3, 4, 5, 6, 7, 8)\nlist.view(3, 6).map(_ + 2).map(_ * 10).force should be(List(__, __, __))",
      "solutions": [
        "60",
        "70",
        "80"
      ],
      "postparagraph": ""
    }
  ]
}
