{
  "title": "Extractors",
  "modules": [
    {
      "preparagraph": "In Scala, patterns can be defined independently of case classes. To this end, a method named `unapply` is defined to yield a so-called extractor.\n\nFor instance, the following code defines an extractor object `Twice`.\n\n\n    object Twice {\n      def apply(x: Int): Int = x * 2\n      def unapply(z: Int): Option[Int] = if (z%2 == 0) Some(z/2) else None\n    }\n\n    object TwiceTest extends Application {\n      val x = Twice(21)\n      x match { case Twice(n) => Console.println(n) } // prints 21\n    }\n\n\nThere are two syntactic conventions at work here:\n\n* The pattern `case Twice(n)` will cause an invocation of `Twice.unapply`, which is used to match even number; the return value of the `unapply` signals whether the argument has matched or not, and any sub-values that can be used for further matching. Here, the sub-value is `z/2`\n* The `apply` method is not necessary for pattern matching. It is only used to mimick a constructor. `val x = Twice(21)` expands to `val x = Twice.apply(21)`.\n\nThe code in the preceding example would be expanded as follows:\n\n\n    object TwiceTest extends Application {\n      val x = Twice.apply(21)\n      Twice.unapply(x) match { case Some(n) => Console.println(n) } // prints 21\n    }\n\nThe return type of an `unapply` should be chosen as follows:\n\n* If it is just a test, return a `Boolean`. For instance `case even()`\n* If it returns a single sub-value of type `T`, return a `Option[T]`\n* If you want to return several sub-values `T1,...,Tn`, group them in an optional tuple `Option[(T1,...,Tn)]`.\n\nSometimes, the number of sub-values is fixed and we would like to return a sequence. For this reason, you can also define patterns through `unapplySeq`. The last sub-value type `Tn` has to be `Seq[S]`. This mechanism is used for instance in pattern `case List(x1, ..., xn)`.\n\nWhen you create a case class, it automatically can be used with pattern matching since it has an extractor:\n",
      "code": "case class Employee(firstName: String, lastName: String)\n\nval rob = new Employee(\"Robin\", \"Williams\")\nval result = rob match {\n  case Employee(\"Robin\", _) => \"Where's Batman?\"\n  case _ => \"No Batman Joke For You\"\n}\n\nresult should be(__)",
      "solutions": [
        "\"Where's Batman?\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "What's an extractor? In Scala it's a method in any `object` called `unapply`, and that method is used to disassemble the object given by returning a tuple wrapped in an option. Extractors can be used to assign values:",
      "code": "class Car(val make: String, val model: String, val year: Short, val topSpeed: Short)\n\nobject ChopShop {\n  def unapply(x: Car) = Some(x.make, x.model, x.year, x.topSpeed)\n}\n\nval ChopShop(a, b, c, d) = new Car(\"Chevy\", \"Camaro\", 1978, 120)\n\na should be(__)\nb should be(__)\nc should be(__)\nd should be(__)",
      "solutions": [
        "\"Chevy\"",
        "\"Camaro\"",
        "1978",
        "120"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Of course an extractor can be used in pattern matching...",
      "code": "class Car(val make: String, val model: String, val year: Short, val topSpeed: Short)\n\nobject ChopShop {\n  def unapply(x: Car) = Some(x.make, x.model, x.year, x.topSpeed)\n}\n\nval x = new Car(\"Chevy\", \"Camaro\", 1978, 120) match {\n  case ChopShop(s, t, u, v) => (s, t)\n  case _ => (\"Ford\", \"Edsel\")\n}\n\nx._1 should be(__)\nx._2 should be(__)",
      "solutions": [
        "\"Chevy\"",
        "\"Camaro\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Since we aren't really using u and v in the previous pattern matching with can replace them with _.",
      "code": "class Car(val make: String, val model: String, val year: Short, val topSpeed: Short)\n\nobject ChopShop {\n  def unapply(x: Car) = Some(x.make, x.model, x.year, x.topSpeed)\n}\n\n\nval x = new Car(\"Chevy\", \"Camaro\", 1978, 120) match {\n  case ChopShop(s, t, _, _) => (s, t)\n  case _ => (\"Ford\", \"Edsel\")\n}\n\nx._1 should be(__)\nx._2 should be(__)",
      "solutions": [
        "\"Chevy\"",
        "\"Camaro\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "As long as the method signatures aren't the same, you can have as many unapply methods as you want:",
      "code": "class Car(val make: String, val model: String, val year: Short, val topSpeed: Short)\nclass Employee(val firstName: String, val middleName: Option[String], val lastName: String)\n\nobject Tokenizer {\n  def unapply(x: Car) = Some(x.make, x.model, x.year, x.topSpeed)\n\n  def unapply(x: Employee) = Some(x.firstName, x.lastName)\n}\n\nval result = new Employee(\"Kurt\", None, \"Vonnegut\") match {\n  case Tokenizer(c, d) => \"c: %s, d: %s\".format(c, d)\n  case _ => \"Not found\"\n}\n\nresult should be(__)",
      "solutions": [
        "\"c: Kurt, d: Vonnegut\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "An extractor can be any stable object, including instantiated classes with an unapply method.",
      "code": "class Car(val make: String, val model: String, val year: Short, val topSpeed: Short) {\n  def unapply(x: Car) = Some(x.make, x.model)\n}\n\nval camaro = new Car(\"Chevy\", \"Camaro\", 1978, 122)\n\nval result = camaro match {\n  case camaro(make, model) => \"make: %s, model: %s\".format(make, model)\n  case _ => \"unknown\"\n}\n\nresult should be(__)",
      "solutions": [
        "\"make: Chevy, model: Camaro\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "What is typical is to create a custom extractor in the companion object of the class. In this exercise, we use it as an assignment:",
      "code": "class Employee(val firstName: String,\n               val middleName: Option[String],\n               val lastName: String)\n\nobject Employee {\n  //factory methods, extractors, apply\n  //Extractor: Create tokens that represent your object\n  def unapply(x: Employee) =\n    Some(x.lastName, x.middleName, x.firstName)\n}\n\nval singri = new Employee(\"Singri\", None, \"Keerthi\")\n\nval Employee(a, b, c) = singri\n\na should be(__)\nb should be(__)\nc should be(__)",
      "solutions": [
        "\"Keerthi\"",
        "None",
        "\"Singri\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "In this exercise we use the unapply for pattern matching employee objects",
      "code": "class Employee(val firstName: String,\n               val middleName: Option[String],\n               val lastName: String)\n\nobject Employee {\n  //factory methods, extractors, apply\n  //Extractor: Create tokens that represent your object\n  def unapply(x: Employee) =\n    Some(x.lastName, x.middleName, x.firstName)\n}\n\nval singri = new Employee(\"Singri\", None, \"Keerthi\")\n\nval result = singri match {\n  case Employee(\"Singri\", None, x) => \"Yay, Singri %s! with no middle name!\".format(x)\n  case Employee(\"Singri\", Some(x), _) => \"Yay, Singri with a middle name of %s\".format(x)\n  case _ => \"I don't care, going on break\"\n}\n\nresult should be(__)",
      "solutions": [
        "\"I don't care, going on break\""
      ],
      "postparagraph": ""
    }
  ]
}
