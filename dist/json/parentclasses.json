{
  "title": "Parent Classes",
  "modules": [
    {
      "preparagraph": "In contrast to Java, all values in Scala are objects (including numerical values and functions). Since Scala is class-based, all values are instances of a class.\n\nClass hierarchy is linear, a class can only extend from one parent class:\n",
      "code": "class Soldier(val firstName: String, val lastName: String) {}\nclass Pilot(override val firstName: String, override val lastName: String,\n               val squadron: Long) extends Soldier(firstName, lastName)\nval pilot = new Pilot(\"John\", \"Yossarian\", 256)\npilot.firstName should be(__)\npilot.lastName should be(__)",
      "solutions": [
        "\"John\"",
        "\"Yossarian\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "A class that extends from another is polymorphic:",
      "code": "class Soldier(val firstName: String, val lastName: String) {}\nclass Pilot(override val firstName: String, override val lastName: String,\n               val squadron: Long) extends Soldier(firstName, lastName)\n\nval pilot = new Pilot(\"John\", \"Yossarian\", 256)\nval soldier: Soldier = pilot\n\nsoldier.firstName should be(__)\nsoldier.lastName should be(__)",
      "solutions": [
        "\"John\"",
        "\"Yossarian\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "An abstract class, as in Java, cannot be instantiated and only inherited:\n\n```\nabstract class Soldier(val firstName: String, val lastName: String) {}\n\n// if you uncomment this line, if will fail compilation\n//val soldier = new Soldier\n```\n\nA class can be placed inside an abstract class just like in java:",
      "code": "abstract class Soldier(val firstName: String, val lastName: String) {\n  class Catch(val number: Long) {\n    // nothing to do here.  Just observe that it compiles\n  }\n}\nclass Pilot(override val firstName: String, override val lastName: String,\n               val squadron: Long) extends Soldier(firstName, lastName)\n\nval pilot = new Pilot(\"John\", \"Yossarian\", 256)\nval catchNo = new pilot.Catch(22)  //using the pilot instance's path, create an catch object for it.\ncatchNo.number should be (__)",
      "solutions": [
        "22"
      ],
      "postparagraph": ""
    }
  ]
}
