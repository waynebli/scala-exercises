{
  "title": "Formatting",
  "modules": [
    {
      "preparagraph": "String can be placed in format:",
      "code": "val s = \"Hello World\"\n\"Application %s\".format(s) should be (__)",
      "solutions": [
        "\"Application Hello World\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Character Literals can be an a single character:",
      "code": "val a = 'a'\nval b = 'B'\n\n\n//format(a) is a string format, meaning the \"%c\".format(x)\n//will return the string representation of the char.\n\n\"%c\".format(a) should be(__)\n\"%c\".format(b) should be(__)",
      "solutions": [
        "\"a\"",
        "\"B\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Character Literals can be an escape sequence, including octal or hexidecimal:",
      "code": "val c = '\\u0061' //unicode for a\nval d = '\\141' //octal for a\nval e = '\\\"'\nval f = '\\\\'\n\n\n\"%c\".format(c) should be(__)\n\"%c\".format(d) should be(__)\n\"%c\".format(e) should be(__)\n\"%c\".format(f) should be(__)",
      "solutions": [
        "\"a\"",
        "\"a\"",
        "\"\\\"\"",
        "\"\\\\\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Formatting can also include numbers:",
      "code": "val j = 190\n\"%d bottles of beer on the wall\" format j - 100 should be (__)",
      "solutions": [
        "\"90 bottles of beer on the wall\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Formatting can be used for any number of items, like a string and a number:",
      "code": "val j = 190\nval k = \"vodka\"\n\n\"%d bottles of %s on the wall\".format(j - 100, k) should be (__)",
      "solutions": [
        "\"90 bottles of vodka on the wall\""
      ],
      "postparagraph": ""
    }
  ]
}