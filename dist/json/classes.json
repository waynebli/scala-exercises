{
  "title": "Classes",
  "modules": [
    {
      "preparagraph": "Classes in Scala are static templates that can be instantiated into many objects at runtime.\nHere is a class definition which defines a class Point:\n\n```\nclass Point(xc: Int, yc: Int) {\n  var x: Int = xc\n  var y: Int = yc\n  def move(dx: Int, dy: Int) {\n    x = x + dx\n    y = y + dy\n  }\n  override def toString(): String = \"(\" + x + \", \" + y + \")\";\n}\n```\nThe class defines two variables `x` and `y` and two methods: `move` and `toString`. \n\n`move` takes two integer arguments but does not return a value (the implicit return type *Unit* corresponds to *void* in Java-like languages). `toString`, on the other hand, does not take any parameters but returns a *String* value. Since `toString` overrides the pre-defined `toString` method, it has to be tagged with the override flag.\n\nClasses in Scala are parameterized with constructor arguments. The code above defines two constructor arguments, `xc` and `yc`; they are both visible in the whole body of the class. In our example they are used to initialize the variables `x` and `y`.\n\nClasses are instantiated with the `new` primitive, as the following example will show:\n\n```\nobject Classes {\n  def main(args: Array[String]) {\n    val pt = new Point(1, 2)\n    println(pt)\n    pt.move(10, 10)\n    println(pt)\n  }\n}\n```\n\nThe program defines an executable application `Classes` in form of a top-level singleton object with a `main` method. The `main` method creates a new `Point` and stores it in value `pt`. Note that values defined with the val construct are different from variables defined with the `var` construct (see class `Point` above) in that they do not allow updates; i.e. the value is constant.\n\nHere is the output of the program:\n\n```\n(1, 2)\n(11, 12)\n```\nYou can define class with `var` or `val` parameters.  `val` parameters in class definition define getter:\n\n",
      "code": "class ClassWithValParameter(val name: String)\nval aClass = new ClassWithValParameter(\"Gandalf\")\naClass.name should be(__)",
      "solutions": [
        "\"Gandalf\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`var` parameters in class definition define getter and setter:",
      "code": "class ClassWithVarParameter(var description: String)\n\nval aClass = new ClassWithVarParameter(\"Flying character\")\naClass.description should be(__)\n\naClass.description = \"Flying white character\"\naClass.description should be(__)",
      "solutions": [
        "\"Flying character\"",
        "\"Flying white character\""
      ],
      "postparagraph": "You can define class with private fields:\n\n```\nclass ClassWithPrivateFields(name: String)\nval aClass = new ClassWithPrivateFields(\"name\")\n```\nNOTE: `aClass.name` is not accessible"
    }
  ]
}