{
  "title": "Objects",
  "modules": [
    {
      "preparagraph": "An object is a singleton. One object, that's it. This object is a replacement of static in Java, and is called upon much in the same way.",
      "code": "object Greeting {\n  def english = \"Hi\"\n\n  def espanol = \"Hola\"\n\n  def deutsch = \"Hallo\"\n\n  def magyar = \"Szia\"\n}\n\nGreeting.english should be(__)\nGreeting.espanol should be(__)\nGreeting.deutsch should be(__)\nGreeting.magyar should be(__)",
      "solutions": [
        "\"Hi\"",
        "\"Hola\"",
        "\"Hallo\"",
        "\"Szia\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Here is proof an object is a singleton, and not a static method in a class",
      "code": "object Greeting {\n  def english = \"Hi\"\n\n  def espanol = \"Hola\"\n\n  def deutsch = \"Hallo\"\n\n  def magyar = \"Szia\"\n}\n\nval x = Greeting\nval y = x\n\nx eq y should be(__) //Reminder, eq checks for reference\n\nval z = Greeting\n\nx eq z should be(__)",
      "solutions": [
        "true",
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "An object that has the same name as class is called a companion object, it is used to contain factories for the class that it complements.",
      "code": "class Movie(val name: String, val year: Short)\n\nobject Movie {\n  def academyAwardBestMoviesForYear(x: Short) = {\n    //These are match statement, more powerful than Java switch statements!\n    x match {\n      case 1930 => Some(new Movie(\"All Quiet On the Western Front\", 1930))\n      case 1931 => Some(new Movie(\"Cimarron\", 1931))\n      case 1932 => Some(new Movie(\"Grand Hotel\", 1932))\n      case _ => None\n    }\n  }\n}\n\nMovie.academyAwardBestMoviesForYear(1932).get.name should be(__)",
      "solutions": [
        "\"Grand Hotel\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "A companion object stores shared variables and values for every instantiated class to share. Having next companion object `SecretAgent`:\n```\nclass SecretAgent(val name: String) {\n  def shoot(n: Int) {\n    SecretAgent.decrementBullets(n)\n  }\n}\n\nobject SecretAgent {\n  //This is encapsulated!\n  var bullets: Int = 3000\n\n  private def decrementBullets(count: Int) {\n    if (bullets - count <= 0) bullets = 0\n    else bullets = bullets - count\n  }\n}\n```\nTry to understand how bullets are decreasing while agents are shooting.",
      "code": "val bond = new SecretAgent(\"James Bond\")\nval felix = new SecretAgent(\"Felix Leitner\")\nval jason = new SecretAgent(\"Jason Bourne\")\nval _99 = new SecretAgent(\"99\")\nval max = new SecretAgent(\"Max Smart\")\n\nbond.shoot(800)\nfelix.shoot(200)\njason.shoot(150)\n_99.shoot(150)\nmax.shoot(200)\n\nSecretAgent.bullets should be(__)",
      "solutions": [
        "1500"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "A companion object can also see private values and variables of the instantiated objects",
      "code": "class Person (val name:String,  private val superheroName:String)  //The superhero name is private!\n\nobject Person {\n  def showMeInnerSecret(x:Person) = x.superheroName\n}\n\nval clark = new Person(\"Clark Kent\", \"Superman\")\nval peter = new Person(\"Peter Parker\", \"Spiderman\")\nval bruce = new Person(\"Bruce Wayne\", \"Batman\")\nval diana = new Person(\"Diana Prince\", \"Wonder Woman\")\n\nPerson.showMeInnerSecret(clark) should be (__)\nPerson.showMeInnerSecret(peter) should be (__)\nPerson.showMeInnerSecret(bruce) should be (__)\nPerson.showMeInnerSecret(diana) should be (__)",
      "solutions": [
        "\"Superman\"",
        "\"Spiderman\"",
        "\"Batman\"",
        "\"Wonder Woman\""
      ],
      "postparagraph": ""
    }
  ]
}
