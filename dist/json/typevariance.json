{
  "title": "Type Variance",
  "modules": [
    {
      "preparagraph": "A traditional objection to static typing is that it has much syntactic overhead. Scala alleviates this by providing *type inference*.\n\nThe classic method for type inference in functional programming languages is *Hindley-Milner*, and it was first employed in ML.\n\nScala’s type inference system works a little differently, but it’s similar in spirit: infer constraints, and attempt to unify a type.\n\nUsing type inference the type that you instantiate it will be the val or var reference type:",
      "code": "class MyContainer[A](a: A)(implicit manifest: scala.reflect.Manifest[A]) {\n  private[this] var item = a\n\n  def get = item\n\n  def set(a: A) {\n    item = a\n  }\n\n  def contents = manifest.runtimeClass.getSimpleName\n}\n\nval fruitBasket = new MyContainer(new Orange())\nfruitBasket.contents should be(__)",
      "solutions": [
        "\"Orange\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "You can explicitly declare the type variable of the object during instantiation:",
      "code": "class MyContainer[A](a: A)(implicit manifest: scala.reflect.Manifest[A]) {\n  private[this] var item = a\n\n  def get = item\n\n  def set(a: A) {\n    item = a\n  }\n\n  def contents = manifest.runtimeClass.getSimpleName\n}\n\nval fruitBasket = new MyContainer[Fruit](new Orange())\nfruitBasket.contents should be(__)",
      "solutions": [
        "\"Fruit\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "You can coerece your object to a type.",
      "code": "class MyContainer[A](a: A)(implicit manifest: scala.reflect.Manifest[A]) {\n  private[this] var item = a\n\n  def get = item\n\n  def set(a: A) {\n    item = a\n  }\n\n  def contents = manifest.runtimeClass.getSimpleName\n}\n\nval fruitBasket: MyContainer[Fruit] = new MyContainer(new Orange())\nfruitBasket.contents should be(__)",
      "solutions": [
        "\"Fruit\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Scala's type system has to account for class hierarchies together with polymorphism. Class hierarchies allow the expression of subtype relationships. A central question that comes up when mixing OO with polymorphism is: if `T'` is a subclass of `T`, is `Container[T']` considered a subclass of `Container[T]`? Variance annotations allow you to express the following relationships between class hierarchies & polymorphic types:\n\n####Covariant:\n- `C[T']` is a subclass of `C[T]`\n- Scala notation: `[+T]`\n\n####Contravariant:\n- `C[T]` is a subclass of `C[T']`\n- Scala notation: `[-T]` \n\n####Invariant:\n- `C[T]` and `C[T']` are not related\n- Scala notation: `[T]` \n\n\nThat one probably blew your mind. Now if you assign a type to the instantiation that is different to the variable type, you'll have problems. You may want to take time after this koan to compare and contrast with the previous one. \n\n```\nclass MyContainer[A](a: A)(implicit manifest: scala.reflect.Manifest[A]) {\n  private[this] var item = a\n\n  def get = item\n\n  def set(a: A) {\n    item = a\n  }\n\n  def contents = manifest.runtimeClass.getSimpleName\n}\n\n// Uncomment the following line\n// val fruitBasket:MyContainer[Fruit] = new MyContainer[Orange](new Orange())\n```\n\nSo, how do we get to set set a Fruit basket to an Orange basket? You make it covariant using `+`. This will allow you to set the container to either a variable with the same type or parent type. In other words, you can assign `MyContainer[Fruit]` or `MyContainer[Citrus]`.",
      "code": "class MyContainer[+A](a: A)(implicit manifest: scala.reflect.Manifest[A]) {\n  private[this] val item = a\n\n  def get = item\n\n  def contents = manifest.runtimeClass.getSimpleName\n}\n\nval fruitBasket: MyContainer[Fruit] = new MyContainer[Orange](new Orange())\nfruitBasket.contents should be(__)",
      "solutions": [
        "\"Orange\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "The problem with covariance is that you can't mutate, set or change the object since it has to guarantee that what you put into it is a valid type.  In other words the reference is a fruit basket, but we still have to make sure that no other fruit can be placed in our orange basket:",
      "code": "class MyContainer[+A](a: A)(implicit manifest: scala.reflect.Manifest[A]) {\n  private[this] val item = a\n\n  def get = item\n\n  def contents = manifest.runtimeClass.getSimpleName\n}\n\nval fruitBasket: MyContainer[Fruit] = new MyContainer[Orange](new Orange())\nfruitBasket.contents should be(__)\n\nclass NavelOrange extends Orange //Creating a subtype to prove a point\n//val navelOrangeBasket: MyContainer[NavelOrange] = new MyContainer[Orange](new Orange()) //Bad!\n//val tangeloBasket: MyContainer[Tangelo] = new MyContainer[Orange](new Orange()) //Bad!",
      "solutions": [
        "\"Orange\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Declaring - indicates contravariance variance.  Using - you can apply any container with a certain type to a container with a superclass of that type.  This is reverse to covariant.  In our example, we can set a citrus basket to an orange or tangelo basket. Since an orange or tangelo basket are a citrus basket. Contravariance is the opposite of covariance:",
      "code": "class MyContainer[-A](a: A)(implicit manifest: scala.reflect.Manifest[A]) {\n  private[this] var item = a\n\n  def set(a: A) {\n    item = a\n  }\n\n  def contents = manifest.runtimeClass.getSimpleName\n}\n\nval citrusBasket: MyContainer[Citrus] = new MyContainer[Citrus](new Orange)\ncitrusBasket.contents should be(__)\nval orangeBasket: MyContainer[Orange] = new MyContainer[Citrus](new Tangelo)\norangeBasket.contents should be(__)\nval tangeloBasket: MyContainer[Tangelo] = new MyContainer[Citrus](new Orange)\ntangeloBasket.contents should be(__)\n\nval orangeBasketReally: MyContainer[Orange] = tangeloBasket.asInstanceOf[MyContainer[Orange]]\norangeBasketReally.contents should be(__)\norangeBasketReally.set(new Orange())",
      "solutions": [
        "\"Citrus\"",
        "\"Citrus\"",
        "\"Citrus\"",
        "\"Citrus\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Declaring contravariance variance with `-` also means that the container cannot be accessed with a getter or some other accessor, since that would cause type inconsistency.  In our example, you can put an orange or a tangelo into a citrus basket. Problem is, if you have a reference to an orange basket, and if you believe that you have an orange basket then you shouldn't expect to get a tangelo out of it. A reference to a parent type means you cannot anticipate getting a more specific type:",
      "code": "class MyContainer[-A](a: A)(implicit manifest: scala.reflect.Manifest[A]) {\n  private[this] var item = a\n\n  def set(a: A) {\n    item = a\n  }\n\n  def contents = manifest.runtimeClass.getSimpleName\n}\n\nval citrusBasket: MyContainer[Citrus] = new MyContainer[Citrus](new Orange)\ncitrusBasket.contents should be(__)\nval orangeBasket: MyContainer[Orange] = new MyContainer[Citrus](new Tangelo)\norangeBasket.contents should be(__)\nval tangeloBasket: MyContainer[Tangelo] = new MyContainer[Citrus](new Orange)\ntangeloBasket.contents should be(__)",
      "solutions": [
        "\"Citrus\"",
        "\"Citrus\"",
        "\"Citrus\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Declaring neither `-`/`+`, indicates invariance variance. You cannot use a superclass variable reference (\\\"contravariant\\\" position) or a subclass variable reference (\\\"covariant\\\" position) of that type.  In our example, this means that if you create a citrus basket you can only reference that citrus basket with a citrus variable only.\n\nInvariance means you need to specify the type exactly:",
      "code": "class MyContainer[A](a: A)(implicit manifest: scala.reflect.Manifest[A]) {\n  private[this] var item = a\n\n  def set(a: A) {\n    item = a\n  }\n\n  def get = item\n\n  def contents = manifest.runtimeClass.getSimpleName\n}\n\nval citrusBasket: MyContainer[Citrus] = new MyContainer[Citrus](new Orange)\ncitrusBasket.contents should be(__)",
      "solutions": [
        "\"Citrus\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Declaring a type as invariant also means that you can both mutate and access elements from an object of generic type:",
      "code": "class MyContainer[A](a: A)(implicit manifest: scala.reflect.Manifest[A]) {\n  private[this] var item = a\n\n  def set(a: A) {\n    item = a\n  }\n\n  def get = item\n\n  def contents = manifest.runtimeClass.getSimpleName\n}\n\nval citrusBasket: MyContainer[Citrus] = new MyContainer[Citrus](new Orange)\n\ncitrusBasket.set(new Orange)\ncitrusBasket.contents should be(__)\n\ncitrusBasket.set(new Tangelo)\ncitrusBasket.contents should be(__)",
      "solutions": [
        "\"Citrus\"",
        "\"Citrus\""
      ],
      "postparagraph": ""
    }
  ]
}
