{
  "title": "Tuples",
  "modules": [
    {
      "preparagraph": "Scala tuple combines a fixed number of items together so that they can be passed around as a whole. They are one indexed. Unlike an array or list, a tuple can hold objects with different types but they are also immutable. Here is an example of a tuple holding an integer, a string, and the console:\n\n```\nval t = (1, \"hello\", Console)\n```\n\nWhich is syntactic sugar (short cut) for the following:\n\n```\nval t = new Tuple3(1, \"hello\", Console)\n```\nAs you can see, tuples can be created easily:",
      "code": "val tuple = (\"apple\", \"dog\")\nval fruit = tuple._1\nval animal = tuple._2\n\nfruit should be(__)\nanimal should be(__)",
      "solutions": [
        "\"apple\"",
        "\"dog\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Tuples may be of mixed type:",
      "code": "val tuple5 = (\"a\", 1, 2.2, new Date(), BigDecimal(5))\n\ntuple5._2 should be(__)\ntuple5._5 should be(__)",
      "solutions": [
        "1",
        "BigDecimal(5)"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "You can assign multiple variables at once using tuples:",
      "code": "val student = (\"Sean Rogers\", 21, 3.5)\nval (name, age, gpa) = student\n\nname should be(__)\nage should be(__)\ngpa should be(__)",
      "solutions": [
        "\"Sean Rogers\"",
        21,
        3.5
      ],
      "postparagraph": ""
    },
    { 
      "preparagraph": "Tuples items can be swapped on a Tuple 2",
      "code": "val tuple = (\"apple\", 3).swap\ntuple._1 should be(__)\ntuple._2 should be(__)",
      "solutions": [
        "3",
        "\"apple\""
      ],
      "postparagraph": ""
    }
  ]
}
