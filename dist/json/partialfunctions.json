{
  "title": "Partial Functions",
  "modules": [
    {
      "preparagraph": "A partial function is a `trait` that when implemented can be used as building blocks to determine a solution.  The trait PartialFunction requires that the method `isDefinedAt` and `apply` be implemented.",
      "code": "val doubleEvens: PartialFunction[Int, Int] = new PartialFunction[Int, Int] {\n  //States that this partial function will take on the task\n  def isDefinedAt(x: Int) = x % 2 == 0\n\n  //What we do if this partial function matches\n  def apply(v1: Int) = v1 * 2\n}\n\nval tripleOdds: PartialFunction[Int, Int] = new PartialFunction[Int, Int] {\n  def isDefinedAt(x: Int) = x % 2 != 0\n\n  def apply(v1: Int) = v1 * 3\n}\n\nval whatToDo = doubleEvens orElse tripleOdds //Here we chain the partial functions together\n\nwhatToDo(3) should be(__)\nwhatToDo(4) should be(__)",
      "solutions": [
        "9",
        "8"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Case statements are a quick way to create partial functions. When you create a case statement, the `apply` and `isDefinedAt` is created for you.",
      "code": "//These case statements are called case statements with guards\nval doubleEvens: PartialFunction[Int, Int] = {\n  case x: Int if (x % 2) == 0 => x * 2\n}\nval tripleOdds: PartialFunction[Int, Int] = {\n  case x: Int if (x % 2) != 0 => x * 3\n}\n\nval whatToDo = doubleEvens orElse tripleOdds //Here we chain the partial functions together\nwhatToDo(3) should be(__)\nwhatToDo(4) should be(__)",
      "solutions": [
        "9",
        "8"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "The result of partial functions can have an `andThen` function added to the end of the chain",
      "code": "//These are called case statements with guards\nval doubleEvens: PartialFunction[Int, Int] = {\n  case x: Int if (x % 2) == 0 => x * 2\n}\nval tripleOdds: PartialFunction[Int, Int] = {\n  case x: Int if (x % 2) != 0 => x * 3\n}\n\nval addFive = (x: Int) => x + 5\nval whatToDo = doubleEvens orElse tripleOdds andThen addFive //Here we chain the partial functions together\nwhatToDo(3) should be(__)\nwhatToDo(4) should be(__)",
      "solutions": [
        "14",
        "13"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "The result of partial functions can have an `andThen` function added to the end of the chain used to continue onto another chain of logic:",
      "code": "val doubleEvens: PartialFunction[Int, Int] = {\n  case x: Int if (x % 2) == 0 => x * 2\n}\nval tripleOdds: PartialFunction[Int, Int] = {\n  case x: Int if (x % 2) != 0 => x * 3\n}\n\nval printEven: PartialFunction[Int, String] = {\n  case x: Int if (x % 2) == 0 => \"Even\"\n}\nval printOdd: PartialFunction[Int, String] = {\n  case x: Int if (x % 2) != 0 => \"Odd\"\n}\n\nval whatToDo = doubleEvens orElse tripleOdds andThen (printEven orElse printOdd)\n\nwhatToDo(3) should be(__)\nwhatToDo(4) should be(__)",
      "solutions": [
        "\"Odd\"",
        "\"Even\""
      ],
      "postparagraph": ""
    }
  ]
}
