{
  "title": "Literal Strings",
  "modules": [
    {
      "preparagraph": "Character Literals are quoted with single quotes:",
      "code": "val a = 'a'\nval b = 'B'\n\na.toString should be(__)\nb.toString should be(__)",
      "solutions": [
        "\"a\"",
        "\"B\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Character Literals can use hexadecimal Unicode",
      "code": "val c = '\\u0061' //unicode for a\n\nc.toString should be(__)",
      "solutions": [
        "\"a\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Character Literals can use octal as well",
      "code": "val d = '\\141' //octal for a\nd.toString should be(__)",
      "solutions": [
        "\"a\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Character Literals can use escape sequences",
      "code": "val e = '\\\"'\nval f = '\\\\'\n\ne.toString should be(__)\nf.toString should be(__)",
      "solutions": [
        "\"\\\"\"",
        "\"\\\\\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "One-Line String Literals are surrounded by quotation marks.",
      "code": "val a = \"To be or not to be\"\na should be(__)",
      "solutions": [
        "\"To be or not to be\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Multiline String literals are surrounded by three quotation marks.",
      "code": "val a = \"\"\"An apple a day\nkeeps the doctor away\"\"\"\na.split('\\n').size should be(__) //a.split('\\n').size determines the number of lines",
      "solutions": [
        "2"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Use stripMargin to prettify multi-line strings:",
      "code": "/*\n* Multiline String literals can use | to specify the starting position\n* of subsequent lines, then use stripMargin to remove the surplus indentation.\n*/\n\nval a = \"\"\"An apple a day\n           |keeps the doctor away\"\"\"\na.stripMargin.split('\\n')(1).charAt(0) should be(__)\n\n/*\n* a.stripMargin.split('\\n')(1).charAt(0)\n* gets the first character of the second line\n*/",
      "solutions": [
        "'k'"
      ],
      "postparagraph": ""
    }
  ]
}