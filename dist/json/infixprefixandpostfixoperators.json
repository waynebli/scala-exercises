{
  "title": "Infix, Prefix and Postfix Operators",
  "modules": [
    {
      "preparagraph": "Any method which takes a single parameter can be used as an infix operator: `a.m(b)` can be written `a m b`.",
      "code": "val g: Int = 3\n(g + 4) should be(__) // + is an infix operator\ng.+(4) should be(__) // same result but not using the infix operator",
      "solutions": [
        "7",
        "7"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Infix Operators do NOT work if an object has a method that takes two parameters:",
      "code": "val g: String = \"Check out the big brains on Brad!\"\n\ng indexOf 'o' should be(__) //indexOf(Char) can be used as an infix operator\n\n// g indexOf 'o', 4 should be (6) //indexOf(Char, Int) cannot be used an infix operator\n\ng.indexOf('o', 7) should be(__) //indexOf(Char, Int) must use standard java/scala calls",
      "solutions": [
        "6",
        "25"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Any method which does not require a parameter can be used as a postfix operator: `a.m` can be written `a m`.\n\nFor instance `a.##(b)` can be written `a ## b` and `a.!` can be written `a!`\n\n**Postfix operators** have lower precedence than **infix operators**, so:\n- `foo bar baz` means `foo.bar(baz)`.\n- `foo bar baz bam` means `(foo.bar(baz)).bam`\n- `foo bar baz bam bim` means `(foo.bar(baz)).bam(bim)`.",
      "code": "val g: Int = 31\n(g toHexString) should be(__) //toHexString takes no params therefore can be called as a postfix operator.\n//Hint: The answer is \"1f\"",
      "solutions": [
        "\"1f\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Prefix operators work if an object has a method name that starts with `unary_` :",
      "code": "val g: Int = 31\n(-g) should be(__)",
      "solutions": [
        "-31"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Here we create our own prefix operator for our own class. The only identifiers that can be used as prefix operators are `+`, `-`, `!`, and `~`:",
      "code": "class Stereo {\n  def unary_+ = \"on\"\n\n  def unary_- = \"off\"\n}\n\nval stereo = new Stereo\n(+stereo) should be(__)\n(-stereo) should be(__)",
      "solutions": [
        "\"on\"",
        "\"off\""
      ],
      "postparagraph": ""
    }
  ]
}
