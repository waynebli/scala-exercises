{
  "title": "Uniform Access Principle",
  "modules": [
    {
      "preparagraph": "The Scala language implements a programming concept known as the [Uniform Access Principle](http://en.wikipedia.org/wiki/Uniform_access_principle) which was first put forth by Bertrand Meyer, inventor of the Eiffel programming language.\n\nThis principle states that variables and parameterless functions should be accessed using the same syntax. Scala supports this principle by not allowing parentheses to be placed at call sites of parameterless functions. As a result, a parameterless function definition can be changed to a val, or vice versa, without affecting client code.\n\nLetâ€™s look at some code:\n\n```\nclass CalculatesAgeUsingMethod(var currentYear: Int, birthYear: Int) {\n\n  def age = currentYear - birthYear\n\n  // calculated when method is called\n}\n\nclass CalculatesAgeUsingProperty(var currentYear: Int, birthYear: Int) {\n  // does age stay up to date if defined as a var instead of a val?\n  val age = currentYear - birthYear\n  // calculated at instantiation, returns property when called\n}\n```\nCan access age as parameterless method:",
      "code": "val me = new CalculatesAgeUsingMethod(2010, 2003)\nme.age should be(__)",
      "solutions": [
        "7"
      ],
      "postparagraph": "Cannot add parameter to Method invocation:\n\n```\nval me = new CalculatesAgeUsingMethod(2010, 2003)\n//me.age() should be (7)\n```"
    },
    {
      "preparagraph": "Can access age as property:",
      "code": "val me = new CalculatesAgeUsingProperty(2010, 2003)\nme.age should be(__)",
      "solutions": [
        "7"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "What happens when I update current year using property",
      "code": "val me = new CalculatesAgeUsingProperty(2010, 2003)\n\nme.currentYear = 2011\nme.age should be(__)",
      "solutions": [
        "7"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "What happens when I update current year using method:",
      "code": "val me = new CalculatesAgeUsingMethod(2010, 2003)\n\nme.currentYear = 2011\nme.age should be(__)",
      "solutions": [
        "8"
      ],
      "postparagraph": ""
    }
  ]
}