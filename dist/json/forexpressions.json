{
  "title": "For Expressions",
  "modules": [
    {
      "preparagraph": "For loops can be simple:",
      "code": "val someNumbers = Range(0, 10)\nvar sum = 0\nfor (i <- someNumbers)\n  sum += i\n\nsum should equal(__)",
      "solutions": [
        "45"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "For loops can contain additional logic:",
      "code": "val someNumbers = Range(0, 10)\nvar sum = 0\n\nfor (i <- someNumbers)\n  if (i % 2 == 0) sum += i\n\nsum should equal(__)\n",
      "solutions": [
        "20"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "For expressions can nest, with later generators varying more rapidly than earlier ones:",
      "code": "val xValues = Range(1, 5)\nval yValues = Range(1, 3)\nval coordinates = for {\n  x <- xValues\n  y <- yValues} yield (x, y)\ncoordinates(4) should be(__, __)",
      "solutions": [
        "3",
        "1"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Using 'for' we can make more readable code",
      "code": "val nums = List(List(1), List(2), List(3), List(4), List(5))\n\nval result = for {\n  numList <- nums\n  num <- numList\n  if(num%2 == 0)\n} yield(num)\n\nresult should be (__)\n\n// Which is the same as\nnums.flatMap(numList=>numList).filter(_%2==0) should be(result)\n\n// or the same as\nnums.flatten.filter(_%2==0) should be(result)\n",
      "solutions": [
        "List(2, 4)"
      ],
      "postparagraph": ""
    }
  ]
}
