{
  "title": "Infix Types",
  "modules": [
    {
      "preparagraph": "An infix type `T1 op T2` consists of an infix operator `op` which gets applied to two\ntype operands `T1` and `T2`. The type is equivalent to the type application `op[T1,T2]`.\n\nThe infix operator op may be an arbitrary identifier, except for `*`, which is reserved\nas a postfix modifier denoting a repeated parameter type.\n\nWe can make a type infix, meaning that the type can be displayed in complement between two types in order to make a readable declaration:",
      "code": "case class Person(name: String)\nclass Loves[A, B](val a: A, val b: B)\n\ndef announceCouple(couple: Person Loves Person) = {\n  //Notice our type: Person loves Person!\n  couple.a.name + \" is in love with \" + couple.b.name\n}\n\nval romeo = new Person(\"Romeo\")\nval juliet = new Person(\"Juliet\")\n\nannounceCouple(new Loves(romeo, juliet)) should be(__)",
      "solutions": [
        "\"Romeo is in love with Juliet\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Of course we can make this a bit more elegant by creating an infix operator method to use with our infix type:",
      "code": "case class Person(name: String) {\n  def loves(person: Person) = new Loves(this, person)\n}\n\nclass Loves[A, B](val a: A, val b: B)\n\ndef announceCouple(couple: Person Loves Person) = {\n  //Notice our type: Person loves Person!\n  couple.a.name + \" is in love with \" + couple.b.name\n}\n\nval romeo = new Person(\"Romeo\")\nval juliet = new Person(\"Juliet\")\n\nannounceCouple(romeo loves juliet) should be(__)",
      "solutions": [
        "\"Romeo is in love with Juliet\""
      ],
      "postparagraph": ""
    }
  ]
}