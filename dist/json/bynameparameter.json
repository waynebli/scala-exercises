{
  "title": "ByName Parameter",
  "modules": [
    {
      "preparagraph": "`() => Int` is a Function type that takes a `Unit` type. `Unit` is known as `void` to a Java programmer. The function returns an `Int`. You can place this as a method parameter so that you can you use it as a block, but still it doesn't look quite right.",
      "code": "def calc(x: () => Int): Either[Throwable, Int] = {\n  try {\n    Right(x()) //An explicit call the the x function\n  } catch {\n    case b: Throwable => Left(b)\n  }\n}\n\nval y = calc {() => //Having explicitly declaring that Unit is a parameter with ()\n  14 + 15\n}\n\ny should be (__)",
      "solutions": [
        "Right(29)"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "A by-name parameter does the same thing as the previous koan but there is no need to explicitly handle `Unit` or `()`. This is used extensively in scala to create blocks.",
      "code": "def calc(x: => Int): Either[Throwable, Int] = {   //x is a call by name parameter\n  try {\n    Right(x)\n  } catch {\n    case b: Throwable => Left(b)\n  }\n}\n\nval y = calc {                                    //This looks like a natural block\n  println(\"Here we go!\")                          //Some superfluous call\n  val z = List(1, 2, 3, 4)                        //Another superfluous call\n  49 + 20\n}\n\ny should be (__)",
      "solutions": [
        "Right(69)"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "By name parameters can also be used with an *Object* and apply to make interesting block-like calls",
      "code": "object PigLatinizer {\n  def apply(x: => String) = x.tail + x.head + \"ay\"\n}\n\nval result = PigLatinizer {\n  val x = \"pret\"\n  val z = \"zel\"\n  x ++ z //concatenate the strings\n}\n\nresult should be (__)",
      "solutions": [
        "\"retzelpay\""
      ],
      "postparagraph": ""
    }
  ]
}
