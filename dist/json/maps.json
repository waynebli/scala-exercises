{
  "title": "Maps",
  "modules": [
    {
      "preparagraph": "A `Map` is an `Iterable` consisting of pairs of keys and values (also named mappings or associations). Scala’s Predef class offers an implicit conversion that lets you write `key -> value` as an alternate syntax for the pair `(key, value)`. For instance `Map(\"x\" -> 24, \"y\" -> 25, \"z\" -> 26)` means exactly the same as `Map((\"x\", 24), (\"y\", 25), (\"z\", 26))`, but reads better.\n\nThe fundamental operations on maps are similar to those on sets. They are summarized in the following table and fall into the following categories:\n\n- Lookup operations `apply`, `get`, `getOrElse`, `contains`, and `isDefinedAt`. These turn maps into partial functions from keys to values. The fundamental lookup method for a map is: `def get(key): Option[Value]`. The operation \"`m get key`\" tests whether the map contains an association for the given key. If so, it returns the associated value in a `Some`. If no key is defined in the map, get returns `None`. Maps also define an `apply` method that returns the value associated with a given key directly, without wrapping it in an `Option`. If the key is not defined in the map, an exception is raised.\n- Additions and updates `+`, `++`, `updated`, which let you add new bindings to a map or change existing bindings.\n- Removals `-`, `--`, which remove bindings from a map.\n- Subcollection producers `keys`, `keySet`, `keysIterator`, `values`, `valuesIterator`, which return a map’s keys and values separately in various forms.\n- Transformations `filterKeys` and `mapValues`, which produce a new map by filtering and transforming bindings of an existing map.\n\nMaps can be created easily:",
      "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nmyMap.size should be(__)",
      "solutions": [
        "4"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Maps contain distinct pairings:",
      "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"MI\" -> \"Michigan\")\nmyMap.size should be(__)",
      "solutions": [
        "3"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Maps can be added to easily:",
      "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"MI\" -> \"Michigan\")\nval aNewMap = myMap + (\"IL\" -> \"Illinois\")\naNewMap.contains(\"IL\") should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Map values can be iterated:",
      "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"MI\" -> \"Michigan\")\n\nval mapValues = myMap.values\nmapValues.size should be(__)\nmapValues.head should be(__) //Failed presumption: The order in maps is not guaranteed \n\nval lastElement = mapValues.last\nlastElement should be(__) //Failed presumption: The order in maps is not guaranteed",
      "solutions": [
        "3",
        "\"Michigan\"",
        "\"Wisconsin\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Maps insertion with duplicate key updates previous entry with subsequent value:",
      "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"MI\" -> \"Meechigan\")\nval mapValues = myMap.values\nmapValues.size should be(__)\nmyMap(\"MI\") should be(__)\n",
      "solutions": [
        "3",
        "\"Meechigan\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Map keys may be of mixed type:",
      "code": "val myMap = Map(\"Ann Arbor\" -> \"MI\", 49931 -> \"MI\")\nmyMap(\"Ann Arbor\") should be(__)\nmyMap(49931) should be(__)",
      "solutions": [
        "\"MI\"",
        "\"MI\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Mixed type values can be added to a map:",
      "code": "val myMap = scala.collection.mutable.Map.empty[String, Any]\nmyMap(\"Ann Arbor\") = (48103, 48104, 48108)\nmyMap(\"Houghton\") = 49931\n\nmyMap(\"Houghton\") should be(__)\nmyMap(\"Ann Arbor\") should be((__, __, __))",
      "solutions": [
        "49931",
        "48103",
        "48104",
        "48108"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Maps may be accessed:",
      "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nmyMap(\"MI\") should be(__)\nmyMap(\"IA\") should be(__)",
      "solutions": [
        "\"Michigan\"",
        "\"Iowa\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Map elements can be removed easily:",
      "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nval aNewMap = myMap - \"MI\"\naNewMap.contains(\"MI\") should be(__)\nmyMap.contains(\"MI\") should be(__)",
      "solutions": [
        "false",
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Accessing a map by key results in an exception if key is not found:",
      "code": "val myMap = Map(\"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nvar blewWithException = true\nintercept[NoSuchElementException] {\n  myMap(\"MI\")\n  blewWithException = false\n}\nblewWithException should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Map elements can be removed in multiple:",
      "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nval aNewMap = myMap -- List(\"MI\", \"OH\")\n\naNewMap.contains(\"MI\") should be(__)\nmyMap.contains(\"MI\") should be(__)\n\naNewMap.contains(\"WI\") should be(__)\naNewMap.size should be(__)\nmyMap.size should be(__)",
      "solutions": [
        "false", 
        "true",
        "true",
        "2",
        "4"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Map elements can be removed with a tuple:",
      "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nval aNewMap = myMap - (\"MI\", \"WI\") // Notice: single '-' operator for tuples\n\naNewMap.contains(\"MI\") should be(__)\nmyMap.contains(\"MI\") should be(__)\naNewMap.contains(\"OH\") should be(__)\naNewMap.size should be(__)\nmyMap.size should be(__)",
      "solutions": [
        "false",
        "true",
        "true",
        "2",
        "4"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Attempted removal of nonexistent elements from a map is handled gracefully:",
      "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nval aNewMap = myMap - \"MN\"\n\naNewMap.equals(myMap) should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Map equivalency is independent of order:",
      "code": "val myMap1 = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nval myMap2 = Map(\"WI\" -> \"Wisconsin\", \"MI\" -> \"Michigan\", \"IA\" -> \"Iowa\", \"OH\" -> \"Ohio\")\n\nmyMap1.equals(myMap2) should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    }
  ]
}
