{
  "title": "Pattern Matching",
  "modules": [
    {
      "preparagraph": "Scala has a built-in general pattern matching mechanism. It allows to match on any sort of data with a first-match policy. \nHere is a small example which shows how to match against an integer value:\n\n```\nobject MatchTest1 extends App {\n  def matchTest(x: Int): String = x match {\n    case 1 => \"one\"\n    case 2 => \"two\"\n    case _ => \"many\"\n  }\n  println(matchTest(3))\n}\n```\n\nThe block with the `case` statements defines a function which maps integers to strings. The `match` keyword provides a convenient way of applying a function (like the pattern matching function above) to an object.\n\nScalaâ€™s pattern matching statement is most useful for matching on algebraic types expressed via `case classes`.\nScala also allows the definition of patterns independently of case classes, using `unapply` methods in extractor objects.\n\nPattern matching returns something:",
      "code": "val stuff = \"blue\"\n\nval myStuff = stuff match {\n  case \"red\" => println(\"RED\"); 1\n  case \"blue\" => println(\"BLUE\"); 2\n  case \"green\" => println(\"GREEN\"); 3\n  case _ => println(stuff); 0 //case _ will trigger if all other cases fail.\n}\n\nmyStuff should be(__)",
      "solutions": [
        "2"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Pattern matching can return complex somethings:",
      "code": "val stuff = \"blue\"\n\nval myStuff = stuff match {\n  case \"red\" => (255, 0, 0)\n  case \"green\" => (0, 255, 0)\n  case \"blue\" => (0, 0, 255)\n  case _ => println(stuff); 0\n}\n\nmyStuff should be(__, __, __)",
      "solutions": [
        "0",
        "0",
        "255"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Pattern matching can match complex expressions:",
      "code": "def goldilocks(expr: Any) = expr match {\n  case (\"porridge\", \"Papa\") => \"Papa eating porridge\"\n  case (\"porridge\", \"Mama\") => \"Mama eating porridge\"\n  case (\"porridge\", \"Baby\") => \"Baby eating porridge\"\n  case _ => \"what?\"\n}\n\ngoldilocks((\"porridge\", \"Mama\")) should be(__)",
      "solutions": [
        "\"Mama eating porridge\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Pattern matching can wildcard parts of expressions:",
      "code": "def goldilocks(expr: Any) = expr match {\n  case (\"porridge\", _) => \"eating\"\n  case (\"chair\", \"Mama\") => \"sitting\"\n  case (\"bed\", \"Baby\") => \"sleeping\"\n  case _ => \"what?\"\n}\n\ngoldilocks((\"porridge\", \"Papa\")) should be(__)\ngoldilocks((\"chair\", \"Mama\")) should be(__)",
      "solutions": [
        "\"eating\"",
        "\"sitting\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Pattern matching can substitute parts of expressions:",
      "code": "def goldilocks(expr: Any) = expr match {\n  case (\"porridge\", bear) => bear + \" said someone's been eating my porridge\"\n  case (\"chair\", bear) => bear + \" said someone's been sitting in my chair\"\n  case (\"bed\", bear) => bear + \" said someone's been sleeping in my bed\"\n  case _ => \"what?\"\n}\n\ngoldilocks((\"porridge\", \"Papa\")) should be(__)\ngoldilocks((\"chair\", \"Mama\")) should be(__)",
      "solutions": [
        "\"Papa said someone's been eating my porridge\"",
        "\"Mama said someone's been sitting in my chair\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Pattern matching can done on regular expression groups:",
      "code": "val EatingRegularExpression = \"\"\"Eating Alert: bear=([^,]+),\\s+source=(.+)\"\"\".r //.r turns a String to a regular expression\nval SittingRegularExpression = \"\"\"Sitting Alert: bear=([^,]+),\\s+source=(.+)\"\"\".r\nval SleepingRegularExpression = \"\"\"Sleeping Alert: bear=([^,]+),\\s+source=(.+)\"\"\".r\n\ndef goldilocks(expr: String) = expr match {\n  case (EatingRegularExpression(bear, source)) => \"%s said someone's been eating my %s\".format(bear, source)\n  case (SittingRegularExpression(bear, source)) => \"%s said someone's been sitting on my %s\".format(bear, source)\n  case (SleepingRegularExpression(bear, source)) => \"%s said someone's been sleeping in my %s\".format(bear, source)\n  case _ => \"what?\"\n}\n\ngoldilocks(\"Eating Alert: bear=Papa, source=porridge\") should be(__)\ngoldilocks(\"Sitting Alert: bear=Mama, source=chair\") should be(__)",
      "solutions": [
        "\"Papa said someone's been eating my porridge\"",
        "\"Mama said someone's been sitting on my chair\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "A backquote can be used to refer to a stable variable in scope to create a case statement. This prevents what is called \"Variable Shadowing\"",
      "code": "val foodItem = \"porridge\"\n\ndef goldilocks(expr: Any) = expr match {\n  case (`foodItem`, _) => \"eating\"\n  case (\"chair\", \"Mama\") => \"sitting\"\n  case (\"bed\", \"Baby\") => \"sleeping\"\n  case _ => \"what?\"\n}\n\ngoldilocks((\"porridge\", \"Papa\")) should be(__)\ngoldilocks((\"chair\", \"Mama\")) should be(__)\ngoldilocks((\"porridge\", \"Cousin\")) should be(__)\ngoldilocks((\"beer\", \"Cousin\")) should be(__)",
      "solutions": [
        "\"eating\"",
        "\"sitting\"",
        "\"eating\"",
        "\"what?\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "A backquote can be used to refer to a method parameter as a stable variable to create a case statement:",
      "code": "def patternEquals(i: Int, j: Int) = j match {\n  case `i` => true\n  case _ => false\n}\npatternEquals(3, 3) should be(__)\npatternEquals(7, 9) should be(__)\npatternEquals(9, 9) should be(__)",
      "solutions": [
        "true",
        "false",
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "To pattern match against a `List`, the list can be broken out into parts, in this case the head `x` and the tail `xs`. Since the case doesn't terminate in `Nil`, `xs` is interpreted as the rest of the list:",
      "code": "val secondElement = List(1, 2, 3) match {\n  case x :: xs => xs.head\n  case _ => 0\n}\n\nsecondElement should be(__)",
      "solutions": [
        "2"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "To obtain the second you can expand on the pattern. Where `x` is the first element, `y` is the second element, and `xs` is the rest:",
      "code": "val secondElement = List(1,2,3) match {\n  case x :: y :: xs => y\n  case _ => 0\n}\n\nsecondElement should be(__)",
      "solutions": [
        "2"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Same koan as above, but we are pattern matching of a list with only one item!",
      "code": "val secondElement = List(1) match {\n  case x :: y :: xs => y\n  case _ => 0\n}\n\nsecondElement should be(__)",
      "solutions": [
        "0"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "To pattern match against `List`, you can also establish a pattern match if you know the exact number of elements in a `List`:",
      "code": "val r = List(1, 2, 3) match {\n  case x :: y :: Nil => y\n  case _ => 0\n}\n\nr should be(__)",
      "solutions": [
        "0"
      ],
      "postparagraph": ""
    }
  ]
}