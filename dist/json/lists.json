{
  "title": "Lists",
  "modules": [
    {
      "preparagraph": "Scala Lists are quite similar to arrays which means, all the elements of a list have the same type but there are two important differences. First, lists are immutable, which means elements of a list cannot be changed by assignment. Second, lists represent a linked list whereas arrays are flat. The type of a list that has elements of type `T` is written as `List[T]`.\n\n`eq` tests identity (same object)",
      "code": "val a = List(1, 2, 3)\nval b = List(1, 2, 3)\n(a eq b) should be(__)",
      "solutions": [
        "false"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`==` tests equality (same content)",
      "code": "val a = List(1, 2, 3)\nval b = List(1, 2, 3)\n(a == b) should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Nil lists are identical, even of different types",
      "code": "val a: List[String] = Nil\nval b: List[Int] = Nil\n\n(a == Nil) should be(__)\n(a eq Nil) should be(__)\n\n(b == Nil) should be(__)\n(b eq Nil) should be(__)\n\n(a == b) should be(__)\n(a eq b) should be(__)",
      "solutions": [
        "true",
        "true",
        "true",
        "true",
        "true",
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Lists are easily created",
      "code": "val a = List(1, 2, 3)\na should equal(List(__, __, __))",
      "solutions": [
        "1",
        "2",
        "3"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Lists can be accessed via head and tail",
      "code": "val a = List(1, 2, 3)\na.head should equal(__)\na.tail should equal(List(__, __))",
      "solutions": [
        "1",
        "2",
        "3"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Lists can be accessed by position",
      "code": "val a = List(1, 3, 5, 7, 9)\na(0) should equal(__)\na(2) should equal(__)\na(4) should equal(__)\n\nintercept[IndexOutOfBoundsException] {\n  println(a(5))\n}",
      "solutions": [
        "1",
        "5",
        "9"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Lists are immutable",
      "code": "val a = List(1, 3, 5, 7, 9)\nval b = a.filterNot(v => v == 5) // remove where value is 5\n\na should equal(List(1, 3, 5, 7, 9))\nb should equal(List(__, __, __, __))",
      "solutions": [
        "1",
        "3",
        "7",
        "9"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Lists have many useful methods",
      "code": "val a = List(1, 3, 5, 7, 9)\n\n// get the length of the list\na.length should equal(__)\n\n// reverse the list\na.reverse should equal(List(__, __, __, __, __))\n\n// convert the list to a string representation\na.toString should equal(\"List(__, __, __, __, __)\")\n\n// map a function to double the numbers over the list\na.map {v => v * 2} should equal(List(__, __, __, __, __))\n\n// filter any values divisible by 3 in the list\na.filter {v => v % 3 == 0} should equal(List(__, __))",
      "solutions": [
        "5",
        "9",
        "7",
        "5",
        "3",
        "1",
        "1",
        "3",
        "5",
        "7",
        "9",
        "2",
        "6",
        "10",
        "14",
        "18",
        "3",
        "9"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Functions over lists can use _ as shorthand",
      "code": "val a = List(1, 2, 3)\n\na.map {_ * 2} should equal(List(__, __, __))\n\na.filter {_ % 2 == 0} should equal(List(__))",
      "solutions": [
        "2",
        "4",
        "6",
        "2"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Functions over lists can use `()` instead of `{}`",
      "code": "val a = List(1, 2, 3)\na.map(_ * 2) should equal(List(__, __, __))\na.filter(_ % 2 != 0) should equal(List(__, __))",
      "solutions": [
        "2",
        "4",
        "6",
        "1",
        "3"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Lists can be *reduced* with a mathematical operation",
      "code": "val a = List(1, 3, 5, 7)\n// note the two _s below indicate the first and second args respectively\na.reduceLeft(_ + _) should equal(__)\na.reduceLeft(_ * _) should equal(__)",
      "solutions": [
        "16",
        "105"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Foldleft is like reduce, but with an explicit starting value",
      "code": "val a = List(1, 3, 5, 7)\n// NOTE: foldLeft uses a form called currying that we will explore later\na.foldLeft(0)(_ + _) should equal(__)\na.foldLeft(10)(_ + _) should equal(__)\na.foldLeft(1)(_ * _) should equal(__)\na.foldLeft(0)(_ * _) should equal(__)",
      "solutions": [
        "16",
        "26",
        "105",
        "0"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "You can create a list from a range",
      "code": "val a = (1 to 5).toList\na should be(List(__, __, __, __, __))",
      "solutions": [
        "1",
        "2",
        "3",
        "4",
        "5"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Lists reuse their tails",
      "code": "val d = Nil\nval c = 3 :: d\nval b = 2 :: c\nval a = 1 :: b\n\na should be(List(__, __, __))\na.tail should be(__)\nb.tail should be(__)\nc.tail should be(__)",
      "solutions": [
        "1",
        "2",
        "3",
        "List(2, 3)",
        "List(3)",
        "Nil"
      ],
      "postparagraph": ""
    }
  ]
}
