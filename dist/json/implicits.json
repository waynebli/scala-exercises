{
  "title": "Implicits",
  "modules": [
    {
      "preparagraph": "A method with implicit parameters can be applied to arguments just like a normal method. In this case the implicit label has no effect. However, if such a method misses arguments for its implicit parameters, such arguments will be automatically provided.\n\nThe actual arguments that are eligible to be passed to an implicit parameter fall into two categories: * First, eligible are all identifiers x that can be accessed at the point of the method call without a prefix and that denote an implicit definition or an implicit parameter. * Second, eligible are also all members of companion modules of the implicit parameter’s type that are labeled implicit.\n\nIn the following example we define a method sum which computes the sum of a list of elements using the monoid’s add and unit operations. Please note that implicit values can not be top-level, they have to be members of a template.\n\n```\nabstract class SemiGroup[A] {\n  def add(x: A, y: A): A\n}\nabstract class Monoid[A] extends SemiGroup[A] {\n  def unit: A\n}\nobject ImplicitTest extends App {\n  implicit object StringMonoid extends Monoid[String] {\n    def add(x: String, y: String): String = x concat y\n    def unit: String = \"\"\n  }\n  implicit object IntMonoid extends Monoid[Int] {\n    def add(x: Int, y: Int): Int = x + y\n    def unit: Int = 0\n  }\n  def sum[A](xs: List[A])(implicit m: Monoid[A]): A =\n    if (xs.isEmpty) m.unit\n    else m.add(xs.head, sum(xs.tail))\n  println(sum(List(1, 2, 3)))\n  println(sum(List(\"a\", \"b\", \"c\")))\n}\n```\n\nHere is the output of the Scala program:\n\n```\n6\nabc\n```\n\nImplicits wrap around existing classes to provide extra functionality. This is similar to *monkey patching* in **Ruby**, and *Meta-Programming* in **Groovy**.\n\nCreating a method isOdd for Int, which doesn't exist:",
      "code": "class KoanIntWrapper(val original: Int) {\n  def isOdd = original % 2 != 0\n}\n\nimplicit def thisMethodNameIsIrrelevant(value: Int) = new KoanIntWrapper(value)\n\n19.isOdd should be(__)\n20.isOdd should be(__)",
      "solutions": [
        "true",
        "false"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Implicits rules can be imported into your scope with an import:",
      "code": "object MyPredef {\n\n  class KoanIntWrapper(val original: Int) {\n    def isOdd = original % 2 != 0\n\n    def isEven = !isOdd\n  }\n\n  implicit def thisMethodNameIsIrrelevant(value: Int) = new KoanIntWrapper(value)\n}\n\nimport MyPredef._\n//imported implicits come into effect within this scope\n19.isOdd should be(__)\n20.isOdd should be(__)",
      "solutions": [
        "true",
        "false"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Implicits can be used to automatically convert one type to another",
      "code": "import java.math.BigInteger\nimplicit def Int2BigIntegerConvert(value: Int): BigInteger = new BigInteger(value.toString)\n\ndef add(a: BigInteger, b: BigInteger) = a.add(b)\n\n\nadd(Int2BigIntegerConvert(3), Int2BigIntegerConvert(6)) == Int2BigIntegerConvert(9)  should be(__)\n\nadd(3, 6) == 9  should be(__)\nadd(3, 6) == Int2BigIntegerConvert(9)  should be(__)\n\nadd(3, 6) == (9:BigInteger)  should be(__)\nadd(3, 6).intValue == 9  should be(__)",
      "solutions": [
        "true",
        "false",
        "true",
        "true",
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Implicits can be used declare a value to be provided as a default as long as an implicit value is set with in the scope.  These are called implicit function parameters:",
      "code": "def howMuchCanIMake_?(hours: Int)(implicit dollarsPerHour: BigDecimal) = dollarsPerHour * hours\n\nimplicit var hourlyRate = BigDecimal(34.00)\n\nhowMuchCanIMake_?(30) should be(__)\n\nhourlyRate = BigDecimal(95.00)\nhowMuchCanIMake_?(95) should be(__)",
      "solutions": [
        "1020.0",
        "9025.0"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Implicit Function Parameters can contain a list of implicits:",
      "code": "def howMuchCanIMake_?(hours: Int)(implicit amount: BigDecimal, currencyName: String) =\n  (amount * hours).toString() + \" \" + currencyName\n\nimplicit var hourlyRate = BigDecimal(34.00)\nimplicit val currencyName = \"Dollars\"\n\nhowMuchCanIMake_?(30) should be(__)\n\nhourlyRate = BigDecimal(95.00)\nhowMuchCanIMake_?(95) should be(__)",
      "solutions": [
        "\"1020.0 Dollars\"",
        "\"9025.0 Dollars\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Default arguments though are preferred to Implicit Function Parameters",
      "code": "def howMuchCanIMake_?(hours: Int, amount: BigDecimal = 34, currencyName: String = \"Dollars\") =\n  (amount * hours).toString() + \" \" + currencyName\n\nhowMuchCanIMake_?(30) should be(__)\n\nhowMuchCanIMake_?(95, 95) should be(__)",
      "solutions": [
        "\"1020 Dollars\"",
        "\"9025 Dollars\""
      ],
      "postparagraph": ""
    }
  ]
}