{
  "title": "Mutable Maps",
  "modules": [
    {
      "preparagraph": "Mutable maps can be created easily:",
      "code": "val myMap = mutable.Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nmyMap.size should be(__)\nmyMap += \"OR\" -> \"Oregon\"\nmyMap contains \"OR\" should be(__)",
      "solutions": [
        "4",
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Mutable maps can have elements removed:",
      "code": "val myMap = mutable.Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nmyMap -= \"OH\"\nmyMap contains \"OH\" should be(__)",
      "solutions": [
        "false"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Mutable maps can have tuples of elements removed:",
      "code": "val myMap = mutable.Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nmyMap -= (\"IA\", \"OH\")\nmyMap contains \"OH\" should be(__)\nmyMap.size should be(__)",
      "solutions": [
        "false",
        "2"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Mutable maps can have tuples of elements added:",
      "code": "val myMap = mutable.Map(\"MI\" -> \"Michigan\", \"WI\" -> \"Wisconsin\")\nmyMap += (\"IA\" -> \"Iowa\", \"OH\" -> \"Ohio\")\nmyMap contains \"OH\" should be(__)\nmyMap.size should be(__)",
      "solutions": [
        "true",
        "4"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Mutable maps can have Lists of elements added:",
      "code": "val myMap = mutable.Map(\"MI\" -> \"Michigan\", \"WI\" -> \"Wisconsin\")\nmyMap ++= List(\"IA\" -> \"Iowa\", \"OH\" -> \"Ohio\")\nmyMap contains \"OH\" should be(__)\nmyMap.size should be(__)",
      "solutions": [
        "true",
        "4"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Mutable maps can have Lists of elements removed:",
      "code": "val myMap = mutable.Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nmyMap --= List(\"IA\", \"OH\")\nmyMap contains \"OH\" should be(__)\nmyMap.size should be(__)",
      "solutions": [
        "false",
        "2"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Mutable maps can be cleared:",
      "code": "val myMap = mutable.Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nmyMap.clear() // Convention is to use parens if possible when method called changes state\nmyMap contains \"OH\" should be(__)\nmyMap.size should be(__)",
      "solutions": [
        "false",
        "0"
      ],
      "postparagraph": ""
    }
  ]
}