{
  "title": "Traits",
  "modules": [
    {
      "preparagraph": "Similar to *interfaces* in Java, traits are used to define object types by specifying the signature of the supported methods. Unlike Java, Scala allows traits to be partially implemented; i.e. it is possible to define default implementations for some methods. In contrast to classes, traits may not have constructor parameters.\n\nHere is an example:\n\n```\ntrait Similarity {\n  def isSimilar(x: Any): Boolean\n  def isNotSimilar(x: Any): Boolean = !isSimilar(x)\n}\n```\n\nThis trait consists of two methods `isSimilar` and `isNotSimilar`. While `isSimilar` does not provide a concrete method implementation (it is abstract in the terminology of Java), method `isNotSimilar` defines a concrete implementation. Consequently, classes that integrate this trait only have to provide a concrete implementation for `isSimilar`. The behavior for `isNotSimilar` gets inherited directly from the trait. Traits are typically integrated into a class (or other traits) with a mixin class composition:\n\n```\nclass Point(xc: Int, yc: Int) extends Similarity {\n  var x: Int = xc\n  var y: Int = yc\n  def isSimilar(obj: Any) =\n    obj.isInstanceOf[Point] &&\n    obj.asInstanceOf[Point].x == x\n}\nobject TraitsTest extends Application {\n  val p1 = new Point(2, 3)\n  val p2 = new Point(2, 4)\n  val p3 = new Point(3, 3)\n  println(p1.isNotSimilar(p2))\n  println(p1.isNotSimilar(p3))\n  println(p1.isNotSimilar(2))\n}\n```\nHere is the output of the program:\n\n```\nfalse\ntrue\ntrue\n```\n\nA class uses the extends keyword to mixin a trait if it is the only relationship the class inherits:",
      "code": "case class Event(name: String)\n\ntrait EventListener {\n  def listen(event: Event): String\n}\n\n\nclass MyListener extends EventListener {\n  def listen(event: Event): String = {\n    event match {\n      case Event(\"Moose Stampede\") => \"An unfortunate moose stampede occurred\"\n      case _ => \"Nothing of importance occurred\"\n    }\n  }\n}\n\nval evt = Event(\"Moose Stampede\")\nval myListener = new MyListener\nmyListener.listen(evt) should be (__)",
      "solutions": [
        "\"An unfortunate moose stampede occurred\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "A class can only `extend` from one class or trait, any subsequent extension should use the keyword `with`:",
      "code": "case class Event(name: String)\n\ntrait EventListener {\n  def listen(event: Event): String\n}\n\nclass OurListener\n\nclass MyListener extends OurListener with EventListener {\n  def listen(event: Event) : String = {\n    event match {\n      case Event(\"Woodchuck Stampede\") => \"An unfortunate woodchuck stampede occurred\"\n      case _ => \"Nothing of importance occurred\"\n    }\n  }\n}\n\nval evt = Event(\"Woodchuck Stampede\")\nval myListener = new MyListener\nmyListener.listen(evt) should be (__)",
      "solutions": [
        "\"An unfortunate woodchuck stampede occurred\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Traits are polymorphic. Any type can be referred to by another type if related by extension:",
      "code": "case class Event(name: String)\n\ntrait EventListener {\n  def listen(event: Event): String\n}\n\nclass MyListener extends EventListener {\n  def listen(event: Event) : String = {\n    event match {\n      case Event(\"Moose Stampede\") => \"An unfortunate moose stampede occurred\"\n      case _ => \"Nothing of importance occurred\"\n    }\n  }\n}\n\nval myListener = new MyListener\n\nmyListener.isInstanceOf[MyListener] should be(__)\nmyListener.isInstanceOf[EventListener] should be(__)\nmyListener.isInstanceOf[Any] should be(__)\nmyListener.isInstanceOf[AnyRef] should be(__)",
      "solutions": [
        "true",
        "true",
        "true",
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Traits can have concrete implementations that can be mixed into concrete classes with it's own state:",
      "code": "trait Logging {\n  var logCache = List[String]()\n\n  def log(value: String) = {\n    logCache = logCache :+ value\n    println(value)\n  }\n}\n\nclass Welder extends Logging {\n  def weld() {\n    log(\"welding pipe\")\n  }\n}\n\nclass Baker extends Logging {\n  def bake() {\n    log(\"baking cake\")\n  }\n}\n\nval welder = new Welder\nwelder.weld()\n\n\nval baker = new Baker\nbaker.bake()\n\nwelder.logCache.size should be(__)\nbaker.logCache.size should be(__)\n",
      "solutions": [
        "1",
        "1"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Traits are instantiated before a classes instantiation:",
      "code": "var sb = List[String]()\n\ntrait T1 {\n  sb = sb :+ \"In T1: x=%s\".format(x)\n  val x = 1\n  sb = sb :+ \"In T1: x=%s\".format(x)\n}\n\nclass C1 extends T1 {\n  sb = sb :+ \"In C1: y=%s\".format(y)\n  val y = 2\n  sb = sb :+ \"In C1: y=%s\".format(y)\n}\n\nsb = sb :+ \"Creating C1\"\nnew C1\nsb = sb :+ \"Created C1\"\n\nsb.mkString(\";\") should be(__)\n",
      "solutions": [
        "\"Creating C1;In T1: x=0;In T1: x=1;In C1: y=0;In C1: y=2;Created C1\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Traits are instantiated before a classes instantiation from left to right:",
      "code": "var sb = List[String]()\n\ntrait T1 {\n  sb = sb :+ \"In T1: x=%s\".format(x)\n  val x = 1\n  sb = sb :+ \"In T1: x=%s\".format(x)\n}\n\ntrait T2 {\n  sb = sb :+ \"In T2: z=%s\".format(z)\n  val z = 1\n  sb = sb :+ \"In T2: z=%s\".format(z)\n}\n\nclass C1 extends T1 with T2 {\n  sb = sb :+ \"In C1: y=%s\".format(y)\n  val y = 2\n  sb = sb :+ \"In C1: y=%s\".format(y)\n}\n\nsb = sb :+ \"Creating C1\"\nnew C1\nsb = sb :+ \"Created C1\"\n\nsb.mkString(\";\") should be(__)\n",
      "solutions": [
        "\"Creating C1;In T1: x=0;In T1: x=1;In T2: z=0;In T2: z=1;In C1: y=0;In C1: y=2;Created C1\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Instantiations are tracked and will not allow a duplicate instantiation. \" + Note T1 extends T2, and C1 also extends T2, but T2 is only instantiated once:",
      "code": "var sb = List[String]()\n\ntrait T1 extends T2 {\n  sb = sb :+ \"In T1: x=%s\".format(x)\n  val x = 1\n  sb = sb :+ \"In T1: x=%s\".format(x)\n}\n\ntrait T2 {\n  sb = sb :+ \"In T2: z=%s\".format(z)\n  val z = 1\n  sb = sb :+ \"In T2: z=%s\".format(z)\n}\n\nclass C1 extends T1 with T2 {\n  sb = sb :+ \"In C1: y=%s\".format(y)\n  val y = 2\n  sb = sb :+ \"In C1: y=%s\".format(y)\n}\n\nsb = sb :+ \"Creating C1\"\nnew C1\nsb = sb :+ \"Created C1\"\n\nsb.mkString(\";\") should be(__)\n",
      "solutions": [
        "\"Creating C1;In T2: z=0;In T2: z=1;In T1: x=0;In T1: x=1;In C1: y=0;In C1: y=2;Created C1\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "The diamond of [death](http://en.wikipedia.org/wiki/Diamond_problem) is avoided since instantiations are tracked and will not allow multiple instantiations:",
      "code": "var sb = List[String]()\n\ntrait T1 {\n  sb = sb :+ \"In T1: x=%s\".format(x)\n  val x = 1\n  sb = sb :+ \"In T1: x=%s\".format(x)\n}\n\ntrait T2 extends T1 {\n  sb = sb :+ \"In T2: z=%s\".format(z)\n  val z = 2\n  sb = sb :+ \"In T2: z=%s\".format(z)\n}\n\ntrait T3 extends T1 {\n  sb = sb :+ \"In T3: w=%s\".format(w)\n  val w = 3\n  sb = sb :+ \"In T3: w=%s\".format(w)\n}\n\nclass C1 extends T2 with T3 {\n  sb = sb :+ \"In C1: y=%s\".format(y)\n  val y = 4\n  sb = sb :+ \"In C1: y=%s\".format(y)\n}\n\nsb = sb :+ \"Creating C1\"\nnew C1\nsb = sb :+ \"Created C1\"\n\nsb.mkString(\";\") should be(__)\n",
      "solutions": [
        "\"Creating C1;In T1: x=0;In T1: x=1;In T2: z=0;In T2: z=2;In T3: w=0;In T3: w=3;In C1: y=0;In C1: y=4;Created C1\""
      ],
      "postparagraph": ""
    }
  ]
}
