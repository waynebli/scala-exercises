{
  "title": "Enumerations",
  "modules": [
    {
      "preparagraph": "To create an enumeration, create an object that extends the abstract class `Enumeration`, and set a `val` variable to the method `Value`.  This is a trick to give values to each `val`.\n\n`Value` assigns a numerical value to fields:",
      "code": "object Planets extends Enumeration {\n  val Mercury = Value\n  val Venus = Value\n  val Earth = Value\n  val Mars = Value\n  val Jupiter = Value\n  val Saturn = Value\n  val Uranus = Value\n  val Neptune = Value\n  val Pluto = Value\n}\n\nPlanets.Mercury.id should be(__)\nPlanets.Venus.id should be(__)\n\nPlanets.Mercury.toString should be(__) //How does it get the name? by Reflection.\nPlanets.Venus.toString should be(__)\n\n(Planets.Earth == Planets.Earth) should be(__)\n(Planets.Neptune == Planets.Jupiter) should be(__)",
      "solutions": [
        "0",
        "1",
        "\"Mercury\"",
        "\"Venus\"",
        "true",
        "false"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "You can create an enumeration with your own index and your own Strings, in this exercise we will start with an index of one and use Greek names instead of Roman:",
      "code": "object GreekPlanets extends Enumeration {\n\n  val Mercury = Value(1, \"Hermes\")\n  val Venus = Value(2, \"Aphrodite\")\n  //Fun Fact: Tellus is Roman for (Mother) Earth\n  val Earth = Value(3, \"Gaia\")\n  val Mars = Value(4, \"Ares\")\n  val Jupiter = Value(5, \"Zeus\")\n  val Saturn = Value(6, \"Cronus\")\n  val Uranus = Value(7, \"Ouranus\")\n  val Neptune = Value(8, \"Poseidon\")\n  val Pluto = Value(9, \"Hades\")\n}\n\nGreekPlanets.Mercury.id should be(__)\nGreekPlanets.Venus.id should be(__)\n\nGreekPlanets.Mercury.toString should be(__)\nGreekPlanets.Venus.toString should be(__)\n\n(GreekPlanets.Earth == GreekPlanets.Earth) should be(__)\n(GreekPlanets.Neptune == GreekPlanets.Jupiter) should be(__)",
      "solutions": [
        "1",
        "2",
        "\"Hermes\"",
        "\"Aphrodite\"",
        "true",
        "false"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Enumerations can be declared in one line if you are merely setting variables to `Value`:",
      "code": "object Planets extends Enumeration {\n  val Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune, Pluto = Value\n}\n\nPlanets.Mercury.id should be(__)\nPlanets.Venus.id should be(__)\n\nPlanets.Mercury.toString should be(__)\nPlanets.Venus.toString should be(__)\n\n(Planets.Earth == Planets.Earth) should be(__)\n(Planets.Neptune == Planets.Jupiter) should be(__)",
      "solutions": [
        "0",
        "1",
        "\"Mercury\"",
        "\"Venus\"",
        "true",
        "false"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Enumerations can be declared with a string value only:",
      "code": "object GreekPlanets extends Enumeration {\n\n  val Mercury = Value(\"Hermes\")\n  val Venus = Value(\"Aphrodite\")\n  val Earth = Value(\"Gaia\")\n  val Mars = Value(\"Ares\")\n  val Jupiter = Value(\"Zeus\")\n  val Saturn = Value(\"Cronus\")\n  val Uranus = Value(\"Ouranus\")\n  val Neptune = Value(\"Poseidon\")\n  val Pluto = Value(\"Hades\")\n}\n\nGreekPlanets.Mercury.id should be(__)\nGreekPlanets.Venus.id should be(__)\n\nGreekPlanets.Mercury.toString should be(__)\nGreekPlanets.Venus.toString should be(__)\n\n(GreekPlanets.Earth == GreekPlanets.Earth) should be(__)\n(GreekPlanets.Neptune == GreekPlanets.Jupiter) should be(__)",
      "solutions": [
        "0",
        "1",
        "\"Hermes\"",
        "\"Aphrodite\"",
        "true",
        "false"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "You can extend the `Enumeration` by extending the `Val` class.",
      "code": "object Planets extends Enumeration {\n\n  val G = 6.67300E-11\n\n  class PlanetValue(val i: Int, val name: String, val mass: Double, val radius: Double)\n          extends Val(i: Int, name: String) {\n\n    def surfaceGravity = G * mass / (radius * radius)\n\n    def surfaceWeight(otherMass: Double) = otherMass * surfaceGravity\n\n    def compare(that: PlanetValue) = this.i - that.i\n  }\n\n  val Mercury = new PlanetValue(0, \"Mercury\", 3.303e+23, 2.4397e6)\n  val Venus = new PlanetValue(1, \"Venus\", 4.869e+24, 6.0518e6)\n  val Earth = new PlanetValue(2, \"Earth\", 5.976e+24, 6.37814e6)\n  val Mars = new PlanetValue(3, \"Mars\", 6.421e+23, 3.3972e6)\n  val Jupiter = new PlanetValue(4, \"Jupiter\", 1.9e+27, 7.1492e7)\n  val Saturn = new PlanetValue(5, \"Saturn\", 5.688e+26, 6.0268e7)\n  val Uranus = new PlanetValue(6, \"Uranus\", 8.686e+25, 2.5559e7)\n  val Neptune = new PlanetValue(7, \"Neptune\", 1.024e+26, 2.4746e7)\n  val Pluto = new PlanetValue(8, \"Pluto\", 1.27e+22, 1.137e6)\n\n}\n\nPlanets.Earth.mass should be(__)\nPlanets.Earth.radius should be(__)",
      "solutions": [
        "5.976e+24",
        "6.37814e6"
      ],
      "postparagraph": ""
    }
  ]
}