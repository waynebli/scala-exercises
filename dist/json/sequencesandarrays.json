{
  "title": "Sequences and Arrays",
  "modules": [
    {
      "preparagraph": "Scala provides a data structure, the array, which stores a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type.\n\nA list can be converted to an array:",
      "code": "val l = List(1, 2, 3)\nval a = l.toArray\na should equal(Array(__, __, __))",
      "solutions": [
        "1",
        "2",
        "3"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Sequences are special cases of iterable collections of class `Iterable`. Unlike iterables, sequences always have a defined order of elements.\n\nAny sequence can be converted to a list:\n",
      "code": "val a = Array(1, 2, 3)\nval s = a.toSeq\nval l = s.toList\nl should equal(__)",
      "solutions": [
        "List(1, 2, 3)"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "You can create a sequence from a for comprehension:",
      "code": "val s = for (v <- 1 to 4) yield v\ns.toList should be(__)",
      "solutions": [
        "List(1, 2, 3, 4)"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "You can create a sequence from a for comprehension with a condition:",
      "code": "val s = for (v <- 1 to 10 if v % 3 == 0) yield v\ns.toList should be(__)",
      "solutions": [
        "List(3, 6, 9)"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "You can filter any sequence based on a predicate:",
      "code": "val s = Seq(\"hello\", \"to\", \"you\")\nval filtered = s.filter(_.length > 2)\nfiltered should be(Seq(__, __))",
      "solutions": [
        "\"hello\"",
        "\"you\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "You can also filter Arrays in the same way:",
      "code": "val a = Array(\"hello\", \"to\", \"you\", \"again\")\nval filtered = a.filter(_.length > 3)\nfiltered should be(Array(__, __))",
      "solutions": [
        "\"hello\"",
        "\"again\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "You can map values in a sequence through a function:",
      "code": "val s = Seq(\"hello\", \"world\")\nval r = s map {\n  _.reverse\n}\n\nr should be(__)",
      "solutions": [
        "Seq(\"olleh\", \"dlrow\")"
      ],
      "postparagraph": ""
    }
  ]
}
