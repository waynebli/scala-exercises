{
  "title": "Higher Order Functions",
  "modules": [
    {
      "preparagraph": "Meet lambda. Scala provides a relatively lightweight syntax for defining anonymous functions. Anonymous functions in source code are called function literals and at run time, function literals are instantiated into objects called function values.\n\nScala supports first-class functions, which means you can express functions in function literal syntax, i.e.,` (x: Int) => x + 1`, and that functions can be represented by objects, which are called function values. ",
      "code": "def lambda = { x: Int => x + 1 }\ndef lambda2 = (x:Int) => x + 1\nval lambda3 = (x:Int) => x + 1\n\nval lambda4 = new Function1[Int, Int] {\n  def apply(v1: Int): Int = v1 + 1\n}\n\ndef lambda5(x:Int) = x + 1\n\nval result = lambda(3)\nval `result1andhalf` = lambda.apply(3)\n\nval result2 = lambda2(3)\nval result3 = lambda3(3)\nval result4 = lambda4(3)\nval result5 = lambda5(3)\n\nresult should be(__)\nresult1andhalf should be(__)\nresult2 should be(__)\nresult3 should be(__)\nresult4 should be(__)\nresult5 should be(__)",
      "solutions": [
        "4",
        "4",
        "4",
        "4",
        "4",
        "4"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "An anonymous function can also take on a different look by taking out the brackets",
      "code": "def lambda = (x: Int) => x + 1\ndef result = lambda(5)\nresult should be(__)",
      "solutions": [
        "6"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Meet closure. A closure is a function, whose return value depends on the value of one or more variables declared outside this function. Consider the following piece of code with anonymous function:\n\n```\nval multiplier = (i:Int) => i * 10\n```\n\nHere the only variable used in the function body, `i * 10`, is `i`, which is defined as a parameter to the function.",
      "code": "var incrementer = 1\n\ndef closure = {\n  x: Int => x + incrementer\n}\n\nval result1 = closure(10)\nresult1 should be(__)\n\nincrementer = 2\n\nval result2 = closure(10)\nresult2 should be(__)",
      "solutions": [
        "11",
        "12"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "We can take that closure and throw into a method and it will still hold the environment",
      "code": "def summation(x:Int, y: Int => Int) = y(x)\n\nvar incrementer = 3\ndef closure = (x: Int) => x + incrementer\n\nval result = summation(10, closure)\nresult should be(__)\n\nincrementer = 4\nval result2 = summation(10, closure)\nresult2 should be(__)",
      "solutions": [
        "13",
        "14"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Function returning another function:",
      "code": "def addWithoutSyntaxSugar(x: Int) = {\n  new Function1[Int, Int]() {\n    def apply(y: Int): Int = x + y\n  }\n}\naddWithoutSyntaxSugar(1).\n  isInstanceOf[Function1[Int,Int]] should be(__)\n\naddWithoutSyntaxSugar(2)(3) should be(__)\n\ndef fiveAdder = addWithoutSyntaxSugar(5)\nfiveAdder(5) should be(__)",
      "solutions": [
        "true",
        "5",
        "10"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Function returning another function using an anonymous function:",
      "code": "def addWithSyntaxSugar(x: Int) = (y:Int) => x + y\n\naddWithSyntaxSugar(1).isInstanceOf[Function1[Int,Int]] should be(__)\naddWithSyntaxSugar(2)(3) should be(__)\n\ndef fiveAdder = addWithSyntaxSugar(5)\nfiveAdder(5) should be(__)",
      "solutions": [
        "true",
        "5",
        "10"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`isInstanceOf` is the same as `instanceof` in java, but in this case the parameter types can be *blanked out* using existential types with is a single underline, since parameter type are unknown at runtime.",
      "code": "def addWithSyntaxSugar(x: Int) = (y:Int) => x + y\n\naddWithSyntaxSugar(1).isInstanceOf[Function1[_, _]] should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Function taking another function as parameter. Helps in composing functions.\n\nHint: a map method applies the function to each element of a list",
      "code": "def makeUpper(xs: List[String]) = xs map {_.toUpperCase}\n\ndef makeWhatEverYouLike(xs: List[String], sideEffect: String => String) = {\n  xs map sideEffect\n}\n\nmakeUpper(List(\"abc\", \"xyz\", \"123\")) should be(__)\n\nmakeWhatEverYouLike(List(\"ABC\", \"XYZ\", \"123\"), {\n  x => x.toLowerCase\n}) should be(__)\n\n//using it inline\nList(\"Scala\", \"Erlang\", \"Clojure\") map {_.length} should be(__)",
      "solutions": [
        "List(\"ABC\", \"XYZ\", \"123\")",
        "List(\"abc\", \"xyz\", \"123\")",
        "List(5, 6, 7)"
      ],      
      "alternatives": [
        "^List\\( *\"ABC\" *, *\"XYZ\" *, *\"123\" *\\)$", 
        "^List\\( *\"abc\" *, *\"xyz\" *, *\"123\" *\\)$", 
        "^List\\( *5 *, *6 *, *7 *\\)$"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Currying is a technique to transform function with multiple parameters to function with one parameter",
      "code": "def multiply(x: Int, y: Int) = x * y\n(multiply _).isInstanceOf[Function2[_, _, _]] should be(__)\nval multiplyCurried = (multiply _).curried\nmultiply(4, 5) should be(__)\nmultiplyCurried(3)(2) should be(__)",
      "solutions": [
        "true",
        "20",
        "6"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Currying allows you to create specialized version of generalized function",
      "code": "def customFilter(f: Int => Boolean)(xs: List[Int]) = {\n  xs filter f\n}\ndef onlyEven(x: Int) = x % 2 == 0\nval xs = List(12, 11, 5, 20, 3, 13, 2)\ncustomFilter(onlyEven)(xs) should be(__)\n\nval onlyEvenFilter = customFilter(onlyEven) _\nonlyEvenFilter(xs) should be(__)",
      "solutions": [
        "List(12, 20, 2)",
        "List(12, 20, 2)"
      ],      
      "alternatives": [
        "^List\\( *12 *, *20 *, *2 *\\)$",
        "^List\\( *12 *, *20 *, *2 *\\)$"
      ],
      "postparagraph": ""
    }
  ]
}
