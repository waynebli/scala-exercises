{
  "title": "Case Classes",
  "modules": [
    {
      "preparagraph": "Scala supports the notion of _case classes_. Case classes are regular classes which export their constructor parameters and which provide a recursive decomposition mechanism via pattern matching.\n\nHere is an example for a class hierarchy which consists of an abstract super class `Term` and three concrete case classes `Var`, `Fun`, and `App`.\n\n```\nabstract class Term\ncase class Var(name: String) extends Term\ncase class Fun(arg: String, body: Term) extends Term\ncase class App(f: Term, v: Term) extends Term\n```\n\nThis class hierarchy can be used to represent terms of the untyped lambda calculus. To facilitate the construction of case class instances, Scala does not require that the `new` primitive is used. One can simply use the class name as a function.\n\nHere is an example:\n\n```\nFun(\"x\", Fun(\"y\", App(Var(\"x\"), Var(\"y\"))))\n```\n\nThe constructor parameters of case classes are treated as public values and can be accessed directly.\n\n```\nval x = Var(\"x\")\nConsole.println(x.name)\n```\n\nFor every case class the Scala compiler generates `equals` method which implements structural equality and a`toString` method. For instance:\n\n```\nval x1 = Var(\"x\")\nval x2 = Var(\"x\")\nval y1 = Var(\"y\")\nprintln(\"\" + x1 + \" == \" + x2 + \" => \" + (x1 == x2))\nprintln(\"\" + x1 + \" == \" + y1 + \" => \" + (x1 == y1))\n```\n\nwill print\n\n```\nVar(x) == Var(x) => true\nVar(x) == Var(y) => false\n```\n\nIt makes only sense to define case classes if pattern matching is used to decompose data structures. The following object defines a pretty printer function for our lambda calculus representation:\n\n```\nobject TermTest extends Application {\n  def printTerm(term: Term) {\n    term match {\n      case Var(n) =>\n        print(n)\n      case Fun(x, b) =>\n        print(\"^\" + x + \".\")\n        printTerm(b)\n      case App(f, v) =>\n        Console.print(\"(\")\n        printTerm(f)\n        print(\" \")\n        printTerm(v)\n        print(\")\")\n    }\n  }\n  def isIdentityFun(term: Term): Boolean = term match {\n    case Fun(x, Var(y)) if x == y => true\n    case _ => false\n  }\n  val id = Fun(\"x\", Var(\"x\"))\n  val t = Fun(\"x\", Fun(\"y\", App(Var(\"x\"), Var(\"y\"))))\n  printTerm(t)\n  println\n  println(isIdentityFun(id))\n  println(isIdentityFun(t))\n}\n```\n\nIn our example, the function `print` is expressed as a pattern matching statement starting with the `match` keyword and consisting of sequences of `case Pattern =>Â Body` clauses.\n\nThe program above also defines a function `isIdentityFun` which checks if a given term corresponds to a simple identity function. This example uses deep patterns and guards. After matching a pattern with a given value, the guard (defined after the keyword `if`) is evaluated. If it returns `true`, the match succeeds; otherwise, it fails and the next pattern will be tried.\n\nCase classes have an automatic equals method that works:",
      "code": "case class Person(first: String, last: String)\n\nval p1 = new Person(\"Fred\", \"Jones\")\nval p2 = new Person(\"Shaggy\", \"Rogers\")\nval p3 = new Person(\"Fred\", \"Jones\")\n\n(p1 == p2) should be(__)\n(p1 == p3) should be(__)\n\n(p1 eq p2) should be(__)\n(p1 eq p3) should be(__) // not identical, merely equal",
      "solutions": [
        "false",
        "true",
        "false",
        "false"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Case classes have an automatic hashcode method that works:",
      "code": "case class Person(first: String, last: String)\n\nval p1 = new Person(\"Fred\", \"Jones\")\nval p2 = new Person(\"Shaggy\", \"Rogers\")\nval p3 = new Person(\"Fred\", \"Jones\")\n\n(p1.hashCode == p2.hashCode) should be(__)\n(p1.hashCode == p3.hashCode) should be(__)",
      "solutions": [
        "false",
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Case classes have a convenient way they can be created:",
      "code": "case class Dog(name: String, breed: String)\n\nval d1 = Dog(\"Scooby\", \"Doberman\")\nval d2 = Dog(\"Rex\", \"Custom\")\nval d3 = new Dog(\"Scooby\", \"Doberman\") // the old way of creating using new\n\n(d1 == d3) should be(__)\n(d1 == d2) should be(__)\n(d2 == d3) should be(__)",
      "solutions": [
        "true",
        "false",
        "false"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Case classes have a convenient toString method defined:",
      "code": "case class Dog(name: String, breed: String)\nval d1 = Dog(\"Scooby\", \"Doberman\")\nd1.toString should be(__)",
      "solutions": [
        "\"Dog(Scooby,Doberman)\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Case classes have automatic properties:",
      "code": "case class Dog(name: String, breed: String)\n\nval d1 = Dog(\"Scooby\", \"Doberman\")\nd1.name should be(__)\nd1.breed should be(__)",
      "solutions": [
        "\"Scooby\"",
        "\"Doberman\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Case classes can have mutable properties:",
      "code": "case class Dog(var name: String, breed: String) // you can rename a dog, but change its breed? nah!\nval d1 = Dog(\"Scooby\", \"Doberman\")\n\nd1.name should be(__)\nd1.breed should be(__)\n\nd1.name = \"Scooby Doo\" // but is it a good idea?\n\nd1.name should be(__)\nd1.breed should be(__)",
      "solutions": [
        "\"Scooby\"",
        "\"Doberman\"",
        "\"Scooby Doo\"",
        "\"Doberman\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Safer alternatives exist for altering case classes:",
      "code": "case class Dog(name: String, breed: String) // Doberman\n\nval d1 = Dog(\"Scooby\", \"Doberman\")\n\nval d2 = d1.copy(name = \"Scooby Doo\") // copy the case class but change the name in the copy\n\nd1.name should be(__) // original left alone\nd1.breed should be(__)\n\nd2.name should be(__)\nd2.breed should be(__) // copied from the original",
      "solutions": [
        "\"Scooby\"",
        "\"Doberman\"",
        "\"Scooby Doo\"",
        "\"Doberman\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Case classes can have default and named parameters:",
      "code": "case class Person(first: String, last: String, age: Int=0, ssn: String=\"\")\nval p1 = Person(\"Fred\", \"Jones\", 23, \"111-22-3333\")\nval p2 = Person(\"Samantha\", \"Jones\") // note missing age and ssn\nval p3 = Person(last = \"Jones\", first = \"Fred\", ssn = \"111-22-3333\") // note the order can change, and missing age\nval p4 = p3.copy(age = 23)\n\np1.first should be(__)\np1.last should be(__)\np1.age should be(__)\np1.ssn should be(__)\n\np2.first should be(__)\np2.last should be(__)\np2.age should be(__)\np2.ssn should be(__)\n\np3.first should be(__)\np3.last should be(__)\np3.age should be(__)\np3.ssn should be(__)\n\n(p1 == p4) should be(__)",
      "solutions": [
        "\"Fred\"",
        "\"Jones\"",
        "23",
        "\"111-22-3333\"",
        "\"Samantha\"",
        "\"Jones\"",
        "0",
        "\"\"",
        "\"Fred\"",
        "\"Jones\"",
        "0",
        "\"111-22-3333\"",
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Case classes can be disassembled to their constituent parts as a tuple:",
      "code": "val p1 = Person(\"Fred\", \"Jones\", 23, \"111-22-3333\")\n\nval parts = Person.unapply(p1).get // this seems weird, but it's critical to other features of Scala\n\nparts._1 should be(__)\nparts._2 should be(__)\nparts._3 should be(__)\nparts._4 should be(__)",
      "solutions": [
        "\"Fred\"",
        "\"Jones\"",
        "23",
        "\"111-22-3333\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Case classes are Serializable",
      "code": "case class PersonCC(firstName:String, lastName:String)\nval indy = PersonCC(\"Indiana\", \"Jones\")\n\nindy.isInstanceOf[Serializable] should be(__)\n\n\nclass Person(firstName:String, lastName:String)\nval junior = new Person(\"Indiana\", \"Jones\")\n\njunior.isInstanceOf[Serializable] should be(__)",
      "solutions": [
        "true",
        "false"
      ],
      "postparagraph": ""
    }
  ]
}
