{
  "title": "Empty Values",
  "modules": [
    {
      "preparagraph": "#### null\n\nScala’s `null` is the same as in Java. Any reference type can be `null`, like Strings, Objects, or your own classes. Also just like Java, value types like Ints can’t be `null`. \n\n#### Null\n\n[Null](http://www.scala-lang.org/api/current/index.html#scala.Null) is a trait whose only instance is `null`. It is a subtype of all reference types, but not of value types. It purpose in existing is to make it so reference types can be assigned `null` and value types can’t. \n\n#### Nothing\n\n[Nothing](http://www.scala-lang.org/api/current/index.html#scala.Nothing) is a trait that is guaranteed to have _zero_ instances. It is a subtype of all other types. It has two main reasons for existing: to provide a return type for methods that **never** return normally (i.e. a method that always throws an exception). The other reason is to provide a type for Nil (explained below). \n\n#### Unit\n\n[Unit](http://www.scala-lang.org/api/current/index.html#scala.Unit) in Scala is the equivalent of `void` in Java. It’s used in a function’s signature when that function doesn’t return a value.\n\n#### Nil\n\n[Nil](http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Nil$) is just an empty list, exactly like the result of `List()`. It is of type `List[Nothing]`. And since we know there are no instances of Nothing, we now have a list that is statically verifiable as empty. Nice to have. \n\nAn empty list can be represented by another nothing value: *Nil*",
      "code": "assert(List() === __)",
      "solutions": [
        "Nil"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "[None](http://www.scala-lang.org/api/current/index.html#scala.None$) is the counterpart to [Some](http://www.scala-lang.org/api/current/index.html#scala.Some), used when you’re using Scala’s [Option](http://www.scala-lang.org/api/current/index.html#scala.Option) class to help avoid `null` references.\n\n*None* equals *None*:",
      "code": "assert(None ===__)",
      "solutions": [
        "None"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "*None* should be identical to *None*:",
      "code": "val a = None\nval b = None\nassert(a eq __)",
      "solutions": [
        "b"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "*None* can be converted to a *String*:",
      "code": "assert(None.toString === __)",
      "solutions": [
        "\"None\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "*None* can be converted to an empty list",
      "code": "val a = None\nassert(a.toList === __)",
      "solutions": [
        "Nil"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "*None* is considered empty",
      "code": "assert(None.isEmpty === __)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "*None* can be cast *Any*, *AnyRef* or *AnyVal*",
      "code": "assert(None.asInstanceOf[Any] === __)\nassert(None.asInstanceOf[AnyRef] === __)\nassert(None.asInstanceOf[AnyVal] === __)",
      "solutions": [
        "None",
        "None",
        "None"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "*None* can be used with *Option* instead of null references",
      "code": "val optional: Option[String] = None\nassert(optional.isEmpty === __)\nassert(optional === __)",
      "solutions": [
        "true",
        "None"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "*Some* is the opposite of *None* for *Option* types",
      "code": "val optional: Option[String] = Some(\"Some Value\")\nassert((optional == None) === __, \"Some(value) should not equal None\")\nassert(optional.isEmpty === __, \"Some(value) should not be empty\")",
      "solutions": [
        "false",
        "false"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`Option.getOrElse` can be used to provide a default in the case of *None*:",
      "code": "val optional: Option[String] = Some(\"Some Value\")\nval optional2: Option[String] = None\nassert(optional.getOrElse(\"No Value\") === __, \"Should return the value in the option\")\nassert(optional2.getOrElse(\"No Value\") === __, \"Should return the specified default value\")",
      "solutions": [
        "\"Some Value\"",
        "\"No Value\""
      ],
      "postparagraph": ""
    }
  ]
}