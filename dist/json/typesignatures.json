{
  "title": "Type Signatures",
  "modules": [
    {
      "preparagraph": "A methodâ€™s *type signature* comprises its name, the number, order, and types of its parameters, if any, and its result type. The type signature of a class, trait, or singleton object comprises its name, the type signatures of all of its members and constructors, and its declared inheritance and mixin relations.\n\nIn Java you declare a generic type within a `<>`, in Scala it is `[]`\n\n```\nval z: List[String] = \"Do\" :: \"Re\" :: \"Mi\" :: \"Fa\" :: \"So\" :: \"La\" :: \"Te\" :: \"Do\" :: Nil\n```\n\nMost of the time, Scala will infer the type and `[]` are optional:\n\n```\nval z = \"Do\" :: \"Re\" :: \"Mi\" :: \"Fa\" :: \"So\" :: \"La\" :: \"Te\" :: \"Do\" :: Nil //Infers that the list assigned to variable is of type List[String]\n```\n\nA trait can be declared containing a type, where a concrete implementer will satisfy the type:\n",
      "code": "trait Randomizer[A] {\n  def draw(): A\n}\n\nclass IntRandomizer extends Randomizer[Int] {\n  def draw() = {\n    import util.Random\n    Random.nextInt()\n  }\n}\n\nval intRand = new IntRandomizer\n(intRand.draw < Int.MaxValue) should be (__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Class meta-information can be retrieved by class name by using `classOf[className]`",
      "code": "classOf[String].getCanonicalName should be(__)\nclassOf[String].getSimpleName should be(__)",
      "solutions": [
        "\"java.lang.String\"",
        "\"String\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Class meta-information can be derived from an object reference using `getClass()`",
      "code": "val zoom = \"zoom\"\nzoom.getClass should be(__) // Hint: classOf ...\nzoom.getClass.getCanonicalName should be(__)\nzoom.getClass.getSimpleName should be(__)",
      "solutions": [
        "classOf[String]",
        "\"java.lang.String\"",
        "\"String\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`isInstanceOf[className]` is used to determine the if an object reference is an instance of given class:",
      "code": "trait Randomizer[A] {\n  def draw(): A\n}\n\nclass IntRandomizer extends Randomizer[Int] {\n  def draw() = {\n    import util.Random\n    Random.nextInt()\n  }\n}\n\nval intRand = new IntRandomizer\nintRand.draw.isInstanceOf[Int] should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`asInstanceOf[className]` is used to cast one reference to another:",
      "code": "trait Randomizer[A] {\n  def draw(): A\n}\n\nclass IntRandomizer extends Randomizer[Int] {\n  def draw = {\n    import util.Random\n    Random.nextInt()\n  }\n}\n\nval intRand = new IntRandomizer\nval rand = intRand\nval intRand2 = rand\nintRand2.isInstanceOf[IntRandomizer] should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`asInstanceOf[className]` will throw a *ClassCastException* if a class derived from and the class target aren't from the same inheritance branch:\n\n```\ntrait Randomizer[A] {\n  def draw(): A\n}\n\nclass IntRandomizer extends Randomizer[Int] {\n  def draw() = {\n    import util.Random\n    Random.nextInt()\n  }\n}\n\nval intRand = new IntRandomizer\n\nintercept[ClassCastException] {\n  intRand.asInstanceOf[String] //intRand cannot be cast to String\n}\n```\n\n`null.asInstanceOf[className]` can be used to generate basic default values",
      "code": "null.asInstanceOf[String] should be(__)\nnull.asInstanceOf[Int] should be(__)\nnull.asInstanceOf[Short] should be(__)",
      "solutions": [
        "null",
        "0",
        "0"
      ],
      "postparagraph": ""
    }
  ]
}