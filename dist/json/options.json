{
  "title": "Options",
  "modules": [
    {
      "preparagraph": "If you have worked with Java at all in the past, it is very likely that you have come across a `NullPointerException` at some time (other languages will throw similarly named errors in such a case). Usually this happens because some method returns null when you were not expecting it and thus not dealing with that possibility in your client code. A value of `null` is often abused to represent an absent optional value.\n\nScala tries to solve the problem by getting rid of `null` values altogether and providing its own type for representing optional values, i.e. values that may be present or not: the `Option[A]` trait.\n\n`Option[A]` is a container for an optional value of type `A`. If the value of type `A` is present, the `Option[A]` is an instance of `Some[A]`, containing the present value of type `A.` If the value is absent, the `Option[A]` is the object `None`.",
      "code": "val someValue: Option[String] = Some(\"I am wrapped in something\")\nsomeValue.get should be(__)\n\nval nullValue: Option[String] = None\nnullValue should be(__)",
      "solutions": [
        "\"I am wrapped in something\"",
        "None"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Having:\n\n```\ndef maybeItWillReturnSomething(flag: Boolean): Option[String] = {\n  if (flag) Some(\"Found value\") else None\n}\n```\nRepresent `null` with `None` because `null` is a bad idea:",
      "code": "val value1 = maybeItWillReturnSomething(true)\nval value2 = maybeItWillReturnSomething(false)\n\nvalue1.get should be(__)\nintercept[java.util.NoSuchElementException] {\n  value2.get\n}\n",
      "solutions": [
        "\"Found value\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Provide a default value for `None`:",
      "code": "val value1 = maybeItWillReturnSomething(true)\nval value2 = maybeItWillReturnSomething(false)\n\nvalue1 getOrElse \"No value\" should be(__)\nvalue2 getOrElse \"No value\" should be(__)\nvalue2 getOrElse {\n  \"default function\"\n} should be(__)\n",
      "solutions": [
        "\"Found value\"",
        "\"No value\"",
        "\"default function\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Checking whether option has value:",
      "code": "val value1 = maybeItWillReturnSomething(true)\nval value2 = maybeItWillReturnSomething(false)\n\nvalue1.isEmpty should be(__)\nvalue2.isEmpty should be(__)",
      "solutions": [
        "false",
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Option can also be used with pattern matching:",
      "code": "val someValue: Option[Double] = Some(20.0)\nval value = someValue match {\n  case Some(v) => v\n  case None => 0.0\n}\nvalue should be(__)\nval noValue: Option[Double] = None\nval value1 = noValue match {\n  case Some(v) => v\n  case None => 0.0\n}\nvalue1 should be(__)",
      "solutions": [
        "20.0",
        "0.0"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "An alternative for pattern matching is performing collection style operations.\nThis is possible because an option could be looked at as a collection with either one or zero elements.\n\nOne of these operations is `map`. this operation allows to map the inner value to a different type while preserving the option",
      "code": "val number: Option[Int] = Some(3)\nval noNumber: Option[Int] = None\nval result1 = number.map(_ * 1.5)\nval result2 = noNumber.map(_ * 1.5)\n\nresult1 should be(__)\nresult2 should be(__)",
      "solutions": [
        "Some(4.5)",
        "None"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Another operation is `fold`. this operation will extract the value from the option, or provide a default if the value is `None`",
      "code": "val number: Option[Int] = Some(3)\nval noNumber: Option[Int] = None\nval result1 = number.fold(0)(_ * 3)\nval result2 = noNumber.fold(0)(_ * 3)\n\nresult1 should be(__)\nresult2 should be(__)",
      "solutions": [
        "9",
        "0"
      ],
      "postparagraph": ""
    }
  ]
}
